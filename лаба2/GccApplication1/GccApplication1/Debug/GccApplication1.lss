
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000017e  00800100  00001c82  00001d16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080027e  0080027e  00001e94  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e94  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00001ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a14  00000000  00000000  00001f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001f1  00000000  00000000  00002974  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ef  00000000  00000000  00002b65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b8  00000000  00000000  00002e54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000295  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b45  00000000  00000000  000032a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00003de6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__ctors_end>
       4:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
       8:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
       c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      10:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      14:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      18:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      1c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      20:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      24:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      28:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      2c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      30:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      34:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      38:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      3c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      40:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      44:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      48:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      4c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      50:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      54:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      58:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      5c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      60:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      64:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	63 64       	ori	r22, 0x43	; 67
      6a:	69 6e       	ori	r22, 0xE9	; 233
      6c:	6f 70       	andi	r22, 0x0F	; 15
      6e:	73 75       	andi	r23, 0x53	; 83
      70:	78 58       	subi	r23, 0x88	; 136
      72:	5b 00       	.word	0x005b	; ????

00000074 <pstr_nan>:
      74:	4e 41 4e                                            NAN

00000077 <pstr_inity>:
      77:	49 4e 49 54 59                                      INITY

0000007c <pstr_inf>:
      7c:	49 4e 46                                            INF

0000007f <pwr_m10>:
      7f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      8f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000097 <pwr_p10>:
      97:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      a7:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000000b0 <__ctors_end>:
      b0:	11 24       	eor	r1, r1
      b2:	1f be       	out	0x3f, r1	; 63
      b4:	cf ef       	ldi	r28, 0xFF	; 255
      b6:	d8 e0       	ldi	r29, 0x08	; 8
      b8:	de bf       	out	0x3e, r29	; 62
      ba:	cd bf       	out	0x3d, r28	; 61

000000bc <__do_copy_data>:
      bc:	12 e0       	ldi	r17, 0x02	; 2
      be:	a0 e0       	ldi	r26, 0x00	; 0
      c0:	b1 e0       	ldi	r27, 0x01	; 1
      c2:	e2 e8       	ldi	r30, 0x82	; 130
      c4:	fc e1       	ldi	r31, 0x1C	; 28
      c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x10>
      c8:	05 90       	lpm	r0, Z+
      ca:	0d 92       	st	X+, r0
      cc:	ae 37       	cpi	r26, 0x7E	; 126
      ce:	b1 07       	cpc	r27, r17
      d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0xc>

000000d2 <__do_clear_bss>:
      d2:	22 e0       	ldi	r18, 0x02	; 2
      d4:	ae e7       	ldi	r26, 0x7E	; 126
      d6:	b2 e0       	ldi	r27, 0x02	; 2
      d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
      da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
      dc:	a2 38       	cpi	r26, 0x82	; 130
      de:	b2 07       	cpc	r27, r18
      e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
      e2:	0e 94 3e 04 	call	0x87c	; 0x87c <main>
      e6:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <_exit>

000000ea <__bad_interrupt>:
      ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ee <UART_Init>:
#define BUFFER_SIZE 64     // Размер буфера для приема строки

// Инициализация UART
void UART_Init() {
    // Установка скорости передачи
    UBRR0H = (uint8_t)(UBRR_VALUE >> 8);
      ee:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = (uint8_t)UBRR_VALUE;
      f2:	87 e6       	ldi	r24, 0x67	; 103
      f4:	80 93 c4 00 	sts	0x00C4, r24

    // Включение приемника и передатчика
    UCSR0B = (1 << RXEN0) | (1 << TXEN0);
      f8:	88 e1       	ldi	r24, 0x18	; 24
      fa:	80 93 c1 00 	sts	0x00C1, r24

    // Установка формата кадра: 8 бит данных, 1 стоп-бит
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
      fe:	86 e0       	ldi	r24, 0x06	; 6
     100:	80 93 c2 00 	sts	0x00C2, r24
     104:	08 95       	ret

00000106 <UART_Transmit>:
}

// Отправка одного символа по UART
void UART_Transmit(char data) {
    while (!(UCSR0A & (1 << UDRE0)));
     106:	e0 ec       	ldi	r30, 0xC0	; 192
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	90 81       	ld	r25, Z
     10c:	95 ff       	sbrs	r25, 5
     10e:	fd cf       	rjmp	.-6      	; 0x10a <UART_Transmit+0x4>
    UDR0 = data;
     110:	80 93 c6 00 	sts	0x00C6, r24
     114:	08 95       	ret

00000116 <UART_SendString>:
}

// Отправка строки по UART
void UART_SendString(const char* str) {
     116:	cf 93       	push	r28
     118:	df 93       	push	r29
     11a:	ec 01       	movw	r28, r24
    while (*str) {
     11c:	88 81       	ld	r24, Y
     11e:	88 23       	and	r24, r24
     120:	31 f0       	breq	.+12     	; 0x12e <UART_SendString+0x18>
     122:	21 96       	adiw	r28, 0x01	; 1
        UART_Transmit(*str++);
     124:	0e 94 83 00 	call	0x106	; 0x106 <UART_Transmit>
    UDR0 = data;
}

// Отправка строки по UART
void UART_SendString(const char* str) {
    while (*str) {
     128:	89 91       	ld	r24, Y+
     12a:	81 11       	cpse	r24, r1
     12c:	fb cf       	rjmp	.-10     	; 0x124 <UART_SendString+0xe>
        UART_Transmit(*str++);
    }
}
     12e:	df 91       	pop	r29
     130:	cf 91       	pop	r28
     132:	08 95       	ret

00000134 <UART_ReceiveString>:

// Прием строки из UART
void UART_ReceiveString(char* buffer, uint8_t buffer_size) {
     134:	0f 93       	push	r16
     136:	1f 93       	push	r17
     138:	cf 93       	push	r28
     13a:	df 93       	push	r29
     13c:	ec 01       	movw	r28, r24
    uint8_t index = 0;
    char received_char;

    // Очистка буфера
    memset(buffer, 0, buffer_size);
     13e:	06 2f       	mov	r16, r22
     140:	10 e0       	ldi	r17, 0x00	; 0
     142:	a8 01       	movw	r20, r16
     144:	60 e0       	ldi	r22, 0x00	; 0
     146:	70 e0       	ldi	r23, 0x00	; 0
     148:	0e 94 53 06 	call	0xca6	; 0xca6 <memset>

    // Чтение данных до символа новой строки или заполнения буфера
    while (index < buffer_size - 1) {
     14c:	a8 01       	movw	r20, r16
     14e:	41 50       	subi	r20, 0x01	; 1
     150:	51 09       	sbc	r21, r1
     152:	14 16       	cp	r1, r20
     154:	15 06       	cpc	r1, r21
     156:	fc f4       	brge	.+62     	; 0x196 <UART_ReceiveString+0x62>
    }
}

// Прием строки из UART
void UART_ReceiveString(char* buffer, uint8_t buffer_size) {
    uint8_t index = 0;
     158:	30 e0       	ldi	r19, 0x00	; 0
    memset(buffer, 0, buffer_size);

    // Чтение данных до символа новой строки или заполнения буфера
    while (index < buffer_size - 1) {
        // Ожидание данных в буфере приемника
        while (!(UCSR0A & (1 << RXC0)));
     15a:	e0 ec       	ldi	r30, 0xC0	; 192
     15c:	f0 e0       	ldi	r31, 0x00	; 0
        received_char = UDR0;
     15e:	86 ec       	ldi	r24, 0xC6	; 198
     160:	90 e0       	ldi	r25, 0x00	; 0
    memset(buffer, 0, buffer_size);

    // Чтение данных до символа новой строки или заполнения буфера
    while (index < buffer_size - 1) {
        // Ожидание данных в буфере приемника
        while (!(UCSR0A & (1 << RXC0)));
     162:	20 81       	ld	r18, Z
     164:	22 23       	and	r18, r18
     166:	ec f7       	brge	.-6      	; 0x162 <UART_ReceiveString+0x2e>
        received_char = UDR0;
     168:	dc 01       	movw	r26, r24
     16a:	2c 91       	ld	r18, X

        // Обработка символа возврата каретки (CR) и новой строки (LF)
        if (received_char == '\r' || received_char == '\n') {
     16c:	2d 30       	cpi	r18, 0x0D	; 13
     16e:	11 f0       	breq	.+4      	; 0x174 <UART_ReceiveString+0x40>
     170:	2a 30       	cpi	r18, 0x0A	; 10
     172:	21 f4       	brne	.+8      	; 0x17c <UART_ReceiveString+0x48>
            // Завершение строки нулевым символом
            buffer[index] = '\0';
     174:	c3 0f       	add	r28, r19
     176:	d1 1d       	adc	r29, r1
     178:	18 82       	st	Y, r1
            return;
     17a:	11 c0       	rjmp	.+34     	; 0x19e <UART_ReceiveString+0x6a>
        }

        // Сохранение символа в буфер
        buffer[index++] = received_char;
     17c:	61 e0       	ldi	r22, 0x01	; 1
     17e:	63 0f       	add	r22, r19
     180:	de 01       	movw	r26, r28
     182:	a3 0f       	add	r26, r19
     184:	b1 1d       	adc	r27, r1
     186:	2c 93       	st	X, r18

    // Очистка буфера
    memset(buffer, 0, buffer_size);

    // Чтение данных до символа новой строки или заполнения буфера
    while (index < buffer_size - 1) {
     188:	26 2f       	mov	r18, r22
     18a:	30 e0       	ldi	r19, 0x00	; 0
     18c:	24 17       	cp	r18, r20
     18e:	35 07       	cpc	r19, r21
     190:	1c f4       	brge	.+6      	; 0x198 <UART_ReceiveString+0x64>
            buffer[index] = '\0';
            return;
        }

        // Сохранение символа в буфер
        buffer[index++] = received_char;
     192:	36 2f       	mov	r19, r22
     194:	e6 cf       	rjmp	.-52     	; 0x162 <UART_ReceiveString+0x2e>
    }
}

// Прием строки из UART
void UART_ReceiveString(char* buffer, uint8_t buffer_size) {
    uint8_t index = 0;
     196:	60 e0       	ldi	r22, 0x00	; 0
        // Сохранение символа в буфер
        buffer[index++] = received_char;
    }

    // Завершение строки нулевым символом, если буфер заполнен
    buffer[index] = '\0';
     198:	c6 0f       	add	r28, r22
     19a:	d1 1d       	adc	r29, r1
     19c:	18 82       	st	Y, r1
}
     19e:	df 91       	pop	r29
     1a0:	cf 91       	pop	r28
     1a2:	1f 91       	pop	r17
     1a4:	0f 91       	pop	r16
     1a6:	08 95       	ret

000001a8 <task_1>:

// Задача 1: Умножение двух чисел
void task_1(char* buffer) {
     1a8:	0f 93       	push	r16
     1aa:	1f 93       	push	r17
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62
     1b4:	c2 54       	subi	r28, 0x42	; 66
     1b6:	d1 09       	sbc	r29, r1
     1b8:	0f b6       	in	r0, 0x3f	; 63
     1ba:	f8 94       	cli
     1bc:	de bf       	out	0x3e, r29	; 62
     1be:	0f be       	out	0x3f, r0	; 63
     1c0:	cd bf       	out	0x3d, r28	; 61
    uint8_t num1, num2;
    sscanf(buffer, "1 %hhu %hhu", &num1, &num2);
     1c2:	9e 01       	movw	r18, r28
     1c4:	2e 5f       	subi	r18, 0xFE	; 254
     1c6:	3f 4f       	sbci	r19, 0xFF	; 255
     1c8:	3f 93       	push	r19
     1ca:	2f 93       	push	r18
     1cc:	21 50       	subi	r18, 0x01	; 1
     1ce:	31 09       	sbc	r19, r1
     1d0:	3f 93       	push	r19
     1d2:	2f 93       	push	r18
     1d4:	20 e0       	ldi	r18, 0x00	; 0
     1d6:	31 e0       	ldi	r19, 0x01	; 1
     1d8:	3f 93       	push	r19
     1da:	2f 93       	push	r18
     1dc:	9f 93       	push	r25
     1de:	8f 93       	push	r24
     1e0:	0e 94 c0 06 	call	0xd80	; 0xd80 <sscanf>
    uint16_t result = num1 * num2;
     1e4:	29 81       	ldd	r18, Y+1	; 0x01
     1e6:	3a 81       	ldd	r19, Y+2	; 0x02
     1e8:	23 9f       	mul	r18, r19
     1ea:	c0 01       	movw	r24, r0
     1ec:	11 24       	eor	r1, r1
    char response[BUFFER_SIZE];
    snprintf(response, BUFFER_SIZE, "Task 1: %u * %u = %u", num1, num2, result);
     1ee:	9f 93       	push	r25
     1f0:	8f 93       	push	r24
     1f2:	1f 92       	push	r1
     1f4:	3f 93       	push	r19
     1f6:	1f 92       	push	r1
     1f8:	2f 93       	push	r18
     1fa:	8c e0       	ldi	r24, 0x0C	; 12
     1fc:	91 e0       	ldi	r25, 0x01	; 1
     1fe:	9f 93       	push	r25
     200:	8f 93       	push	r24
     202:	1f 92       	push	r1
     204:	80 e4       	ldi	r24, 0x40	; 64
     206:	8f 93       	push	r24
     208:	8e 01       	movw	r16, r28
     20a:	0d 5f       	subi	r16, 0xFD	; 253
     20c:	1f 4f       	sbci	r17, 0xFF	; 255
     20e:	1f 93       	push	r17
     210:	0f 93       	push	r16
     212:	0e 94 90 06 	call	0xd20	; 0xd20 <snprintf>
    UART_SendString(response);
     216:	c8 01       	movw	r24, r16
     218:	0e 94 8b 00 	call	0x116	; 0x116 <UART_SendString>
    UART_SendString("\r\n");
     21c:	8d ee       	ldi	r24, 0xED	; 237
     21e:	91 e0       	ldi	r25, 0x01	; 1
     220:	0e 94 8b 00 	call	0x116	; 0x116 <UART_SendString>
     224:	0f b6       	in	r0, 0x3f	; 63
     226:	f8 94       	cli
     228:	de bf       	out	0x3e, r29	; 62
     22a:	0f be       	out	0x3f, r0	; 63
     22c:	cd bf       	out	0x3d, r28	; 61
}
     22e:	ce 5b       	subi	r28, 0xBE	; 190
     230:	df 4f       	sbci	r29, 0xFF	; 255
     232:	0f b6       	in	r0, 0x3f	; 63
     234:	f8 94       	cli
     236:	de bf       	out	0x3e, r29	; 62
     238:	0f be       	out	0x3f, r0	; 63
     23a:	cd bf       	out	0x3d, r28	; 61
     23c:	df 91       	pop	r29
     23e:	cf 91       	pop	r28
     240:	1f 91       	pop	r17
     242:	0f 91       	pop	r16
     244:	08 95       	ret

00000246 <task_2>:

// Задача 2: Количество единиц в бинарном представлении числа
void task_2(char* buffer) {
     246:	0f 93       	push	r16
     248:	1f 93       	push	r17
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	cd b7       	in	r28, 0x3d	; 61
     250:	de b7       	in	r29, 0x3e	; 62
     252:	c1 54       	subi	r28, 0x41	; 65
     254:	d1 09       	sbc	r29, r1
     256:	0f b6       	in	r0, 0x3f	; 63
     258:	f8 94       	cli
     25a:	de bf       	out	0x3e, r29	; 62
     25c:	0f be       	out	0x3f, r0	; 63
     25e:	cd bf       	out	0x3d, r28	; 61
    uint8_t num;
    sscanf(buffer, "2 %hhu", &num);
     260:	9e 01       	movw	r18, r28
     262:	2f 5f       	subi	r18, 0xFF	; 255
     264:	3f 4f       	sbci	r19, 0xFF	; 255
     266:	3f 93       	push	r19
     268:	2f 93       	push	r18
     26a:	21 e2       	ldi	r18, 0x21	; 33
     26c:	31 e0       	ldi	r19, 0x01	; 1
     26e:	3f 93       	push	r19
     270:	2f 93       	push	r18
     272:	9f 93       	push	r25
     274:	8f 93       	push	r24
     276:	0e 94 c0 06 	call	0xd80	; 0xd80 <sscanf>
    uint8_t count = 0;
    for (uint8_t i = 0; i < 8; i++) {
        if (num & (1 << i)) count++;
     27a:	79 81       	ldd	r23, Y+1	; 0x01
     27c:	47 2f       	mov	r20, r23
     27e:	50 e0       	ldi	r21, 0x00	; 0
     280:	0f 90       	pop	r0
     282:	0f 90       	pop	r0
     284:	0f 90       	pop	r0
     286:	0f 90       	pop	r0
     288:	0f 90       	pop	r0
     28a:	0f 90       	pop	r0
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	90 e0       	ldi	r25, 0x00	; 0

// Задача 2: Количество единиц в бинарном представлении числа
void task_2(char* buffer) {
    uint8_t num;
    sscanf(buffer, "2 %hhu", &num);
    uint8_t count = 0;
     290:	60 e0       	ldi	r22, 0x00	; 0
    for (uint8_t i = 0; i < 8; i++) {
        if (num & (1 << i)) count++;
     292:	9a 01       	movw	r18, r20
     294:	08 2e       	mov	r0, r24
     296:	02 c0       	rjmp	.+4      	; 0x29c <task_2+0x56>
     298:	35 95       	asr	r19
     29a:	27 95       	ror	r18
     29c:	0a 94       	dec	r0
     29e:	e2 f7       	brpl	.-8      	; 0x298 <task_2+0x52>
     2a0:	20 fd       	sbrc	r18, 0
     2a2:	6f 5f       	subi	r22, 0xFF	; 255
     2a4:	01 96       	adiw	r24, 0x01	; 1
// Задача 2: Количество единиц в бинарном представлении числа
void task_2(char* buffer) {
    uint8_t num;
    sscanf(buffer, "2 %hhu", &num);
    uint8_t count = 0;
    for (uint8_t i = 0; i < 8; i++) {
     2a6:	88 30       	cpi	r24, 0x08	; 8
     2a8:	91 05       	cpc	r25, r1
     2aa:	99 f7       	brne	.-26     	; 0x292 <task_2+0x4c>
        if (num & (1 << i)) count++;
    }
    char response[BUFFER_SIZE];
    snprintf(response, BUFFER_SIZE, "Task 2: Number of 1s in %u = %u", num, count);
     2ac:	1f 92       	push	r1
     2ae:	6f 93       	push	r22
     2b0:	1f 92       	push	r1
     2b2:	7f 93       	push	r23
     2b4:	88 e2       	ldi	r24, 0x28	; 40
     2b6:	91 e0       	ldi	r25, 0x01	; 1
     2b8:	9f 93       	push	r25
     2ba:	8f 93       	push	r24
     2bc:	1f 92       	push	r1
     2be:	80 e4       	ldi	r24, 0x40	; 64
     2c0:	8f 93       	push	r24
     2c2:	8e 01       	movw	r16, r28
     2c4:	0e 5f       	subi	r16, 0xFE	; 254
     2c6:	1f 4f       	sbci	r17, 0xFF	; 255
     2c8:	1f 93       	push	r17
     2ca:	0f 93       	push	r16
     2cc:	0e 94 90 06 	call	0xd20	; 0xd20 <snprintf>
    UART_SendString(response);
     2d0:	c8 01       	movw	r24, r16
     2d2:	0e 94 8b 00 	call	0x116	; 0x116 <UART_SendString>
    UART_SendString("\r\n");
     2d6:	8d ee       	ldi	r24, 0xED	; 237
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	0e 94 8b 00 	call	0x116	; 0x116 <UART_SendString>
     2de:	0f b6       	in	r0, 0x3f	; 63
     2e0:	f8 94       	cli
     2e2:	de bf       	out	0x3e, r29	; 62
     2e4:	0f be       	out	0x3f, r0	; 63
     2e6:	cd bf       	out	0x3d, r28	; 61
}
     2e8:	cf 5b       	subi	r28, 0xBF	; 191
     2ea:	df 4f       	sbci	r29, 0xFF	; 255
     2ec:	0f b6       	in	r0, 0x3f	; 63
     2ee:	f8 94       	cli
     2f0:	de bf       	out	0x3e, r29	; 62
     2f2:	0f be       	out	0x3f, r0	; 63
     2f4:	cd bf       	out	0x3d, r28	; 61
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	1f 91       	pop	r17
     2fc:	0f 91       	pop	r16
     2fe:	08 95       	ret

00000300 <task_3>:

// Задача 3: Деление двух чисел и остаток
void task_3(char* buffer) {
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	cd b7       	in	r28, 0x3d	; 61
     30a:	de b7       	in	r29, 0x3e	; 62
     30c:	c2 54       	subi	r28, 0x42	; 66
     30e:	d1 09       	sbc	r29, r1
     310:	0f b6       	in	r0, 0x3f	; 63
     312:	f8 94       	cli
     314:	de bf       	out	0x3e, r29	; 62
     316:	0f be       	out	0x3f, r0	; 63
     318:	cd bf       	out	0x3d, r28	; 61
    uint8_t num1, num2;
    sscanf(buffer, "3 %hhu %hhu", &num1, &num2);
     31a:	9e 01       	movw	r18, r28
     31c:	2e 5f       	subi	r18, 0xFE	; 254
     31e:	3f 4f       	sbci	r19, 0xFF	; 255
     320:	3f 93       	push	r19
     322:	2f 93       	push	r18
     324:	21 50       	subi	r18, 0x01	; 1
     326:	31 09       	sbc	r19, r1
     328:	3f 93       	push	r19
     32a:	2f 93       	push	r18
     32c:	28 e4       	ldi	r18, 0x48	; 72
     32e:	31 e0       	ldi	r19, 0x01	; 1
     330:	3f 93       	push	r19
     332:	2f 93       	push	r18
     334:	9f 93       	push	r25
     336:	8f 93       	push	r24
     338:	0e 94 c0 06 	call	0xd80	; 0xd80 <sscanf>
    if (num2 == 0) {
     33c:	2a 81       	ldd	r18, Y+2	; 0x02
     33e:	0f b6       	in	r0, 0x3f	; 63
     340:	f8 94       	cli
     342:	de bf       	out	0x3e, r29	; 62
     344:	0f be       	out	0x3f, r0	; 63
     346:	cd bf       	out	0x3d, r28	; 61
     348:	21 11       	cpse	r18, r1
     34a:	05 c0       	rjmp	.+10     	; 0x356 <task_3+0x56>
        UART_SendString("Task 3: Division by zero is not allowed\r\n");
     34c:	84 e5       	ldi	r24, 0x54	; 84
     34e:	91 e0       	ldi	r25, 0x01	; 1
     350:	0e 94 8b 00 	call	0x116	; 0x116 <UART_SendString>
     354:	27 c0       	rjmp	.+78     	; 0x3a4 <task_3+0xa4>
        return;
    }
    uint8_t quotient = num1 / num2;
     356:	39 81       	ldd	r19, Y+1	; 0x01
    uint8_t remainder = num1 % num2;
     358:	83 2f       	mov	r24, r19
     35a:	62 2f       	mov	r22, r18
     35c:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__udivmodqi4>
    char response[BUFFER_SIZE];
    snprintf(response, BUFFER_SIZE, "Task 3: %u / %u = %u, Remainder = %u", num1, num2, quotient, remainder);
     360:	1f 92       	push	r1
     362:	9f 93       	push	r25
     364:	1f 92       	push	r1
     366:	8f 93       	push	r24
     368:	1f 92       	push	r1
     36a:	2f 93       	push	r18
     36c:	1f 92       	push	r1
     36e:	3f 93       	push	r19
     370:	8e e7       	ldi	r24, 0x7E	; 126
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	9f 93       	push	r25
     376:	8f 93       	push	r24
     378:	1f 92       	push	r1
     37a:	80 e4       	ldi	r24, 0x40	; 64
     37c:	8f 93       	push	r24
     37e:	8e 01       	movw	r16, r28
     380:	0d 5f       	subi	r16, 0xFD	; 253
     382:	1f 4f       	sbci	r17, 0xFF	; 255
     384:	1f 93       	push	r17
     386:	0f 93       	push	r16
     388:	0e 94 90 06 	call	0xd20	; 0xd20 <snprintf>
    UART_SendString(response);
     38c:	c8 01       	movw	r24, r16
     38e:	0e 94 8b 00 	call	0x116	; 0x116 <UART_SendString>
    UART_SendString("\r\n");
     392:	8d ee       	ldi	r24, 0xED	; 237
     394:	91 e0       	ldi	r25, 0x01	; 1
     396:	0e 94 8b 00 	call	0x116	; 0x116 <UART_SendString>
     39a:	0f b6       	in	r0, 0x3f	; 63
     39c:	f8 94       	cli
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	cd bf       	out	0x3d, r28	; 61
}
     3a4:	ce 5b       	subi	r28, 0xBE	; 190
     3a6:	df 4f       	sbci	r29, 0xFF	; 255
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	f8 94       	cli
     3ac:	de bf       	out	0x3e, r29	; 62
     3ae:	0f be       	out	0x3f, r0	; 63
     3b0:	cd bf       	out	0x3d, r28	; 61
     3b2:	df 91       	pop	r29
     3b4:	cf 91       	pop	r28
     3b6:	1f 91       	pop	r17
     3b8:	0f 91       	pop	r16
     3ba:	08 95       	ret

000003bc <task_4>:

// Задача 4: Возведение числа в степень
void task_4(char* buffer) {
     3bc:	0f 93       	push	r16
     3be:	1f 93       	push	r17
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	cd b7       	in	r28, 0x3d	; 61
     3c6:	de b7       	in	r29, 0x3e	; 62
     3c8:	c2 54       	subi	r28, 0x42	; 66
     3ca:	d1 09       	sbc	r29, r1
     3cc:	0f b6       	in	r0, 0x3f	; 63
     3ce:	f8 94       	cli
     3d0:	de bf       	out	0x3e, r29	; 62
     3d2:	0f be       	out	0x3f, r0	; 63
     3d4:	cd bf       	out	0x3d, r28	; 61
    uint8_t num, power;
    sscanf(buffer, "4 %hhu %hhu", &num, &power);
     3d6:	9e 01       	movw	r18, r28
     3d8:	2e 5f       	subi	r18, 0xFE	; 254
     3da:	3f 4f       	sbci	r19, 0xFF	; 255
     3dc:	3f 93       	push	r19
     3de:	2f 93       	push	r18
     3e0:	21 50       	subi	r18, 0x01	; 1
     3e2:	31 09       	sbc	r19, r1
     3e4:	3f 93       	push	r19
     3e6:	2f 93       	push	r18
     3e8:	23 ea       	ldi	r18, 0xA3	; 163
     3ea:	31 e0       	ldi	r19, 0x01	; 1
     3ec:	3f 93       	push	r19
     3ee:	2f 93       	push	r18
     3f0:	9f 93       	push	r25
     3f2:	8f 93       	push	r24
     3f4:	0e 94 c0 06 	call	0xd80	; 0xd80 <sscanf>
    uint16_t result = 1;
    for (uint8_t i = 0; i < power; i++) {
     3f8:	5a 81       	ldd	r21, Y+2	; 0x02
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	f8 94       	cli
     3fe:	de bf       	out	0x3e, r29	; 62
     400:	0f be       	out	0x3f, r0	; 63
     402:	cd bf       	out	0x3d, r28	; 61
     404:	55 23       	and	r21, r21
     406:	89 f0       	breq	.+34     	; 0x42a <task_4+0x6e>
        result *= num;
     408:	29 81       	ldd	r18, Y+1	; 0x01
     40a:	30 e0       	ldi	r19, 0x00	; 0
// Задача 4: Возведение числа в степень
void task_4(char* buffer) {
    uint8_t num, power;
    sscanf(buffer, "4 %hhu %hhu", &num, &power);
    uint16_t result = 1;
    for (uint8_t i = 0; i < power; i++) {
     40c:	40 e0       	ldi	r20, 0x00	; 0

// Задача 4: Возведение числа в степень
void task_4(char* buffer) {
    uint8_t num, power;
    sscanf(buffer, "4 %hhu %hhu", &num, &power);
    uint16_t result = 1;
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	90 e0       	ldi	r25, 0x00	; 0
    for (uint8_t i = 0; i < power; i++) {
        result *= num;
     412:	bc 01       	movw	r22, r24
     414:	62 9f       	mul	r22, r18
     416:	c0 01       	movw	r24, r0
     418:	63 9f       	mul	r22, r19
     41a:	90 0d       	add	r25, r0
     41c:	72 9f       	mul	r23, r18
     41e:	90 0d       	add	r25, r0
     420:	11 24       	eor	r1, r1
// Задача 4: Возведение числа в степень
void task_4(char* buffer) {
    uint8_t num, power;
    sscanf(buffer, "4 %hhu %hhu", &num, &power);
    uint16_t result = 1;
    for (uint8_t i = 0; i < power; i++) {
     422:	4f 5f       	subi	r20, 0xFF	; 255
     424:	45 13       	cpse	r20, r21
     426:	f5 cf       	rjmp	.-22     	; 0x412 <task_4+0x56>
     428:	02 c0       	rjmp	.+4      	; 0x42e <task_4+0x72>

// Задача 4: Возведение числа в степень
void task_4(char* buffer) {
    uint8_t num, power;
    sscanf(buffer, "4 %hhu %hhu", &num, &power);
    uint16_t result = 1;
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	90 e0       	ldi	r25, 0x00	; 0
    for (uint8_t i = 0; i < power; i++) {
        result *= num;
    }
    char response[BUFFER_SIZE];
    snprintf(response, BUFFER_SIZE, "Task 4: %u ^ %u = %u", num, power, result);
     42e:	9f 93       	push	r25
     430:	8f 93       	push	r24
     432:	1f 92       	push	r1
     434:	5f 93       	push	r21
     436:	89 81       	ldd	r24, Y+1	; 0x01
     438:	1f 92       	push	r1
     43a:	8f 93       	push	r24
     43c:	8f ea       	ldi	r24, 0xAF	; 175
     43e:	91 e0       	ldi	r25, 0x01	; 1
     440:	9f 93       	push	r25
     442:	8f 93       	push	r24
     444:	1f 92       	push	r1
     446:	80 e4       	ldi	r24, 0x40	; 64
     448:	8f 93       	push	r24
     44a:	8e 01       	movw	r16, r28
     44c:	0d 5f       	subi	r16, 0xFD	; 253
     44e:	1f 4f       	sbci	r17, 0xFF	; 255
     450:	1f 93       	push	r17
     452:	0f 93       	push	r16
     454:	0e 94 90 06 	call	0xd20	; 0xd20 <snprintf>
    UART_SendString(response);
     458:	c8 01       	movw	r24, r16
     45a:	0e 94 8b 00 	call	0x116	; 0x116 <UART_SendString>
    UART_SendString("\r\n");
     45e:	8d ee       	ldi	r24, 0xED	; 237
     460:	91 e0       	ldi	r25, 0x01	; 1
     462:	0e 94 8b 00 	call	0x116	; 0x116 <UART_SendString>
     466:	0f b6       	in	r0, 0x3f	; 63
     468:	f8 94       	cli
     46a:	de bf       	out	0x3e, r29	; 62
     46c:	0f be       	out	0x3f, r0	; 63
     46e:	cd bf       	out	0x3d, r28	; 61
}
     470:	ce 5b       	subi	r28, 0xBE	; 190
     472:	df 4f       	sbci	r29, 0xFF	; 255
     474:	0f b6       	in	r0, 0x3f	; 63
     476:	f8 94       	cli
     478:	de bf       	out	0x3e, r29	; 62
     47a:	0f be       	out	0x3f, r0	; 63
     47c:	cd bf       	out	0x3d, r28	; 61
     47e:	df 91       	pop	r29
     480:	cf 91       	pop	r28
     482:	1f 91       	pop	r17
     484:	0f 91       	pop	r16
     486:	08 95       	ret

00000488 <task_5>:

// Задача 5: Обработка сложного математического выражения
void task_5(char* buffer) {
     488:	4f 92       	push	r4
     48a:	5f 92       	push	r5
     48c:	6f 92       	push	r6
     48e:	7f 92       	push	r7
     490:	9f 92       	push	r9
     492:	af 92       	push	r10
     494:	bf 92       	push	r11
     496:	cf 92       	push	r12
     498:	df 92       	push	r13
     49a:	ef 92       	push	r14
     49c:	ff 92       	push	r15
     49e:	0f 93       	push	r16
     4a0:	1f 93       	push	r17
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	cd b7       	in	r28, 0x3d	; 61
     4a8:	de b7       	in	r29, 0x3e	; 62
     4aa:	c1 5b       	subi	r28, 0xB1	; 177
     4ac:	d1 09       	sbc	r29, r1
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	f8 94       	cli
     4b2:	de bf       	out	0x3e, r29	; 62
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	cd bf       	out	0x3d, r28	; 61
     4b8:	7c 01       	movw	r14, r24
	// Пропускаем "5" в начале строки
	char* expr = buffer + 1;
     4ba:	6c 01       	movw	r12, r24
     4bc:	2f ef       	ldi	r18, 0xFF	; 255
     4be:	c2 1a       	sub	r12, r18
     4c0:	d2 0a       	sbc	r13, r18
	char expr_copy[BUFFER_SIZE]; // Создаем копию для безопасной обработки
	strncpy(expr_copy, expr, BUFFER_SIZE-1);
     4c2:	4f e3       	ldi	r20, 0x3F	; 63
     4c4:	50 e0       	ldi	r21, 0x00	; 0
     4c6:	b6 01       	movw	r22, r12
     4c8:	8e 01       	movw	r16, r28
     4ca:	0f 5f       	subi	r16, 0xFF	; 255
     4cc:	1f 4f       	sbci	r17, 0xFF	; 255
     4ce:	c8 01       	movw	r24, r16
     4d0:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <strncpy>
	expr_copy[BUFFER_SIZE-1] = '\0';
     4d4:	21 96       	adiw	r28, 0x01	; 1
     4d6:	1f ae       	std	Y+63, r1	; 0x3f
     4d8:	21 97       	sbiw	r28, 0x01	; 1
	
	// Проверяем длину выражения
	if (strlen(expr_copy) > 50) {
     4da:	f8 01       	movw	r30, r16
     4dc:	01 90       	ld	r0, Z+
     4de:	00 20       	and	r0, r0
     4e0:	e9 f7       	brne	.-6      	; 0x4dc <task_5+0x54>
     4e2:	31 97       	sbiw	r30, 0x01	; 1
     4e4:	e0 1b       	sub	r30, r16
     4e6:	f1 0b       	sbc	r31, r17
     4e8:	f3 97       	sbiw	r30, 0x33	; 51
     4ea:	20 f4       	brcc	.+8      	; 0x4f4 <task_5+0x6c>
		UART_SendString("Error: Expression too long (max 50 chars)\r\n");
		return;
	}
	
	// Проверяем допустимые символы
	for (char* c = expr_copy; *c; c++) {
     4ec:	89 81       	ldd	r24, Y+1	; 0x01
     4ee:	81 11       	cpse	r24, r1
     4f0:	06 c0       	rjmp	.+12     	; 0x4fe <task_5+0x76>
     4f2:	18 c0       	rjmp	.+48     	; 0x524 <task_5+0x9c>
	strncpy(expr_copy, expr, BUFFER_SIZE-1);
	expr_copy[BUFFER_SIZE-1] = '\0';
	
	// Проверяем длину выражения
	if (strlen(expr_copy) > 50) {
		UART_SendString("Error: Expression too long (max 50 chars)\r\n");
     4f4:	84 ec       	ldi	r24, 0xC4	; 196
     4f6:	91 e0       	ldi	r25, 0x01	; 1
     4f8:	0e 94 8b 00 	call	0x116	; 0x116 <UART_SendString>
		return;
     4fc:	85 c1       	rjmp	.+778    	; 0x808 <task_5+0x380>
     4fe:	fe 01       	movw	r30, r28
     500:	32 96       	adiw	r30, 0x02	; 2
	}
	
	// Проверяем допустимые символы
	for (char* c = expr_copy; *c; c++) {
		if (!isdigit(*c) && *c != '+' && *c != '-' && *c != '*' && *c != '/') {
     502:	8d 32       	cpi	r24, 0x2D	; 45
     504:	61 f0       	breq	.+24     	; 0x51e <task_5+0x96>
     506:	96 ed       	ldi	r25, 0xD6	; 214
     508:	98 0f       	add	r25, r24
     50a:	92 30       	cpi	r25, 0x02	; 2
     50c:	40 f0       	brcs	.+16     	; 0x51e <task_5+0x96>
     50e:	8f 52       	subi	r24, 0x2F	; 47
     510:	8b 30       	cpi	r24, 0x0B	; 11
     512:	28 f0       	brcs	.+10     	; 0x51e <task_5+0x96>
			UART_SendString("Error: Invalid character in expression\r\n");
     514:	80 ef       	ldi	r24, 0xF0	; 240
     516:	91 e0       	ldi	r25, 0x01	; 1
     518:	0e 94 8b 00 	call	0x116	; 0x116 <UART_SendString>
			return;
     51c:	75 c1       	rjmp	.+746    	; 0x808 <task_5+0x380>
		UART_SendString("Error: Expression too long (max 50 chars)\r\n");
		return;
	}
	
	// Проверяем допустимые символы
	for (char* c = expr_copy; *c; c++) {
     51e:	81 91       	ld	r24, Z+
     520:	81 11       	cpse	r24, r1
     522:	ef cf       	rjmp	.-34     	; 0x502 <task_5+0x7a>
	char operators[9];
	uint8_t num_count = 0;
	uint8_t op_count = 0;
	
	// Извлекаем числа
	char* token = strtok(expr_copy, "+-*/");
     524:	69 e1       	ldi	r22, 0x19	; 25
     526:	72 e0       	ldi	r23, 0x02	; 2
     528:	ce 01       	movw	r24, r28
     52a:	01 96       	adiw	r24, 0x01	; 1
     52c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <strtok>
	while (token != NULL && num_count < 10) {
     530:	00 97       	sbiw	r24, 0x00	; 0
     532:	09 f4       	brne	.+2      	; 0x536 <task_5+0xae>
     534:	50 c1       	rjmp	.+672    	; 0x7d6 <task_5+0x34e>
     536:	8e 01       	movw	r16, r28
     538:	0f 5b       	subi	r16, 0xBF	; 191
     53a:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	
	// Разбиваем выражение на числа и операторы
	float numbers[10];
	char operators[9];
	uint8_t num_count = 0;
     53c:	b1 2c       	mov	r11, r1
	uint8_t op_count = 0;
	
	// Извлекаем числа
	char* token = strtok(expr_copy, "+-*/");
	while (token != NULL && num_count < 10) {
	numbers[num_count++] = atof(token);
     53e:	b3 94       	inc	r11
     540:	0e 94 4a 06 	call	0xc94	; 0xc94 <atof>
     544:	bc 01       	movw	r22, r24
     546:	88 27       	eor	r24, r24
     548:	77 fd       	sbrc	r23, 7
     54a:	80 95       	com	r24
     54c:	98 2f       	mov	r25, r24
     54e:	0e 94 2b 05 	call	0xa56	; 0xa56 <__floatsisf>
     552:	f8 01       	movw	r30, r16
     554:	61 93       	st	Z+, r22
     556:	71 93       	st	Z+, r23
     558:	81 93       	st	Z+, r24
     55a:	91 93       	st	Z+, r25
     55c:	8f 01       	movw	r16, r30
	token = strtok(NULL, "+-*/");
     55e:	69 e1       	ldi	r22, 0x19	; 25
     560:	72 e0       	ldi	r23, 0x02	; 2
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	0e 94 4e 06 	call	0xc9c	; 0xc9c <strtok>
	uint8_t num_count = 0;
	uint8_t op_count = 0;
	
	// Извлекаем числа
	char* token = strtok(expr_copy, "+-*/");
	while (token != NULL && num_count < 10) {
     56a:	00 97       	sbiw	r24, 0x00	; 0
     56c:	09 f4       	brne	.+2      	; 0x570 <task_5+0xe8>
     56e:	34 c1       	rjmp	.+616    	; 0x7d8 <task_5+0x350>
     570:	fa e0       	ldi	r31, 0x0A	; 10
     572:	bf 12       	cpse	r11, r31
     574:	e4 cf       	rjmp	.-56     	; 0x53e <task_5+0xb6>
     576:	30 c1       	rjmp	.+608    	; 0x7d8 <task_5+0x350>
	token = strtok(NULL, "+-*/");
	}
	
	// Извлекаем операторы из исходной строки
	for (char* c = expr; *c && op_count < 9; c++) {
	if (*c == '+' || *c == '-' || *c == '*' || *c == '/') {
     578:	98 2f       	mov	r25, r24
     57a:	9d 7f       	andi	r25, 0xFD	; 253
     57c:	9d 32       	cpi	r25, 0x2D	; 45
     57e:	21 f0       	breq	.+8      	; 0x588 <task_5+0x100>
     580:	96 ed       	ldi	r25, 0xD6	; 214
     582:	98 0f       	add	r25, r24
     584:	92 30       	cpi	r25, 0x02	; 2
     586:	40 f4       	brcc	.+16     	; 0x598 <task_5+0x110>
	operators[op_count++] = *c;
     588:	a9 e6       	ldi	r26, 0x69	; 105
     58a:	b0 e0       	ldi	r27, 0x00	; 0
     58c:	ac 0f       	add	r26, r28
     58e:	bd 1f       	adc	r27, r29
     590:	a9 0d       	add	r26, r9
     592:	b1 1d       	adc	r27, r1
     594:	8c 93       	st	X, r24
     596:	93 94       	inc	r9
	numbers[num_count++] = atof(token);
	token = strtok(NULL, "+-*/");
	}
	
	// Извлекаем операторы из исходной строки
	for (char* c = expr; *c && op_count < 9; c++) {
     598:	81 91       	ld	r24, Z+
     59a:	88 23       	and	r24, r24
     59c:	19 f0       	breq	.+6      	; 0x5a4 <task_5+0x11c>
     59e:	28 e0       	ldi	r18, 0x08	; 8
     5a0:	29 15       	cp	r18, r9
     5a2:	50 f7       	brcc	.-44     	; 0x578 <task_5+0xf0>
	operators[op_count++] = *c;
	}
	}
	
	// Проверка корректности
	if (num_count != op_count + 1) {
     5a4:	2b 2d       	mov	r18, r11
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	89 2d       	mov	r24, r9
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	01 96       	adiw	r24, 0x01	; 1
     5ae:	28 17       	cp	r18, r24
     5b0:	39 07       	cpc	r19, r25
     5b2:	19 f4       	brne	.+6      	; 0x5ba <task_5+0x132>
	UART_SendString("Error: Invalid expression format\r\n");
	return;
	}
	
	// Вычисление выражения (с учетом приоритета */)
	for (uint8_t i = 0; i < op_count; i++) {
     5b4:	91 10       	cpse	r9, r1
     5b6:	06 c0       	rjmp	.+12     	; 0x5c4 <task_5+0x13c>
     5b8:	16 c1       	rjmp	.+556    	; 0x7e6 <task_5+0x35e>
	}
	}
	
	// Проверка корректности
	if (num_count != op_count + 1) {
	UART_SendString("Error: Invalid expression format\r\n");
     5ba:	8e e1       	ldi	r24, 0x1E	; 30
     5bc:	92 e0       	ldi	r25, 0x02	; 2
     5be:	0e 94 8b 00 	call	0x116	; 0x116 <UART_SendString>
	return;
     5c2:	22 c1       	rjmp	.+580    	; 0x808 <task_5+0x380>
	}
	
	// Вычисление выражения (с учетом приоритета */)
	for (uint8_t i = 0; i < op_count; i++) {
     5c4:	f1 2c       	mov	r15, r1
	if (operators[i] == '*' || operators[i] == '/') {
     5c6:	0f 2d       	mov	r16, r15
     5c8:	10 e0       	ldi	r17, 0x00	; 0
     5ca:	e9 e6       	ldi	r30, 0x69	; 105
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
     5ce:	ec 0f       	add	r30, r28
     5d0:	fd 1f       	adc	r31, r29
     5d2:	e0 0f       	add	r30, r16
     5d4:	f1 1f       	adc	r31, r17
     5d6:	80 81       	ld	r24, Z
     5d8:	8a 32       	cpi	r24, 0x2A	; 42
     5da:	21 f0       	breq	.+8      	; 0x5e4 <task_5+0x15c>
     5dc:	8f 32       	cpi	r24, 0x2F	; 47
     5de:	09 f0       	breq	.+2      	; 0x5e2 <task_5+0x15a>
     5e0:	a7 c0       	rjmp	.+334    	; 0x730 <task_5+0x2a8>
     5e2:	1e c0       	rjmp	.+60     	; 0x620 <task_5+0x198>
	float result;
	if (operators[i] == '*') {
	result = numbers[i] * numbers[i+1];
     5e4:	f8 01       	movw	r30, r16
     5e6:	ee 0f       	add	r30, r30
     5e8:	ff 1f       	adc	r31, r31
     5ea:	ee 0f       	add	r30, r30
     5ec:	ff 1f       	adc	r31, r31
     5ee:	81 e4       	ldi	r24, 0x41	; 65
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	8c 0f       	add	r24, r28
     5f4:	9d 1f       	adc	r25, r29
     5f6:	e8 0f       	add	r30, r24
     5f8:	f9 1f       	adc	r31, r25
     5fa:	d8 01       	movw	r26, r16
     5fc:	11 96       	adiw	r26, 0x01	; 1
     5fe:	aa 0f       	add	r26, r26
     600:	bb 1f       	adc	r27, r27
     602:	aa 0f       	add	r26, r26
     604:	bb 1f       	adc	r27, r27
     606:	a8 0f       	add	r26, r24
     608:	b9 1f       	adc	r27, r25
     60a:	2d 91       	ld	r18, X+
     60c:	3d 91       	ld	r19, X+
     60e:	4d 91       	ld	r20, X+
     610:	5c 91       	ld	r21, X
     612:	60 81       	ld	r22, Z
     614:	71 81       	ldd	r23, Z+1	; 0x01
     616:	82 81       	ldd	r24, Z+2	; 0x02
     618:	93 81       	ldd	r25, Z+3	; 0x03
     61a:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__mulsf3>
     61e:	31 c0       	rjmp	.+98     	; 0x682 <task_5+0x1fa>
	} else {
	if (numbers[i+1] == 0) {
     620:	f8 01       	movw	r30, r16
     622:	31 96       	adiw	r30, 0x01	; 1
     624:	ee 0f       	add	r30, r30
     626:	ff 1f       	adc	r31, r31
     628:	ee 0f       	add	r30, r30
     62a:	ff 1f       	adc	r31, r31
     62c:	21 e4       	ldi	r18, 0x41	; 65
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	2c 0f       	add	r18, r28
     632:	3d 1f       	adc	r19, r29
     634:	e2 0f       	add	r30, r18
     636:	f3 1f       	adc	r31, r19
     638:	40 80       	ld	r4, Z
     63a:	51 80       	ldd	r5, Z+1	; 0x01
     63c:	62 80       	ldd	r6, Z+2	; 0x02
     63e:	73 80       	ldd	r7, Z+3	; 0x03
     640:	20 e0       	ldi	r18, 0x00	; 0
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	a9 01       	movw	r20, r18
     646:	c3 01       	movw	r24, r6
     648:	b2 01       	movw	r22, r4
     64a:	0e 94 bd 04 	call	0x97a	; 0x97a <__cmpsf2>
     64e:	81 11       	cpse	r24, r1
     650:	05 c0       	rjmp	.+10     	; 0x65c <task_5+0x1d4>
	UART_SendString("Error: Division by zero\r\n");
     652:	81 e4       	ldi	r24, 0x41	; 65
     654:	92 e0       	ldi	r25, 0x02	; 2
     656:	0e 94 8b 00 	call	0x116	; 0x116 <UART_SendString>
	return;
     65a:	d6 c0       	rjmp	.+428    	; 0x808 <task_5+0x380>
	}
	result = numbers[i] / numbers[i+1];
     65c:	f8 01       	movw	r30, r16
     65e:	ee 0f       	add	r30, r30
     660:	ff 1f       	adc	r31, r31
     662:	ee 0f       	add	r30, r30
     664:	ff 1f       	adc	r31, r31
     666:	81 e4       	ldi	r24, 0x41	; 65
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	8c 0f       	add	r24, r28
     66c:	9d 1f       	adc	r25, r29
     66e:	e8 0f       	add	r30, r24
     670:	f9 1f       	adc	r31, r25
     672:	a3 01       	movw	r20, r6
     674:	92 01       	movw	r18, r4
     676:	60 81       	ld	r22, Z
     678:	71 81       	ldd	r23, Z+1	; 0x01
     67a:	82 81       	ldd	r24, Z+2	; 0x02
     67c:	93 81       	ldd	r25, Z+3	; 0x03
     67e:	0e 94 c1 04 	call	0x982	; 0x982 <__divsf3>
	}
	
	// Обновляем числа и операторы
	numbers[i] = result;
     682:	f8 01       	movw	r30, r16
     684:	ee 0f       	add	r30, r30
     686:	ff 1f       	adc	r31, r31
     688:	ee 0f       	add	r30, r30
     68a:	ff 1f       	adc	r31, r31
     68c:	21 e4       	ldi	r18, 0x41	; 65
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	2c 0f       	add	r18, r28
     692:	3d 1f       	adc	r19, r29
     694:	e2 0f       	add	r30, r18
     696:	f3 1f       	adc	r31, r19
     698:	60 83       	st	Z, r22
     69a:	71 83       	std	Z+1, r23	; 0x01
     69c:	82 83       	std	Z+2, r24	; 0x02
     69e:	93 83       	std	Z+3, r25	; 0x03
	for (uint8_t j = i+1; j < num_count-1; j++) {
     6a0:	61 e0       	ldi	r22, 0x01	; 1
     6a2:	6f 0d       	add	r22, r15
     6a4:	26 2f       	mov	r18, r22
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	4b 2d       	mov	r20, r11
     6aa:	50 e0       	ldi	r21, 0x00	; 0
     6ac:	41 50       	subi	r20, 0x01	; 1
     6ae:	51 09       	sbc	r21, r1
     6b0:	24 17       	cp	r18, r20
     6b2:	35 07       	cpc	r19, r21
     6b4:	2c f5       	brge	.+74     	; 0x700 <task_5+0x278>
	numbers[j] = numbers[j+1];
     6b6:	f9 01       	movw	r30, r18
     6b8:	31 96       	adiw	r30, 0x01	; 1
     6ba:	ee 0f       	add	r30, r30
     6bc:	ff 1f       	adc	r31, r31
     6be:	ee 0f       	add	r30, r30
     6c0:	ff 1f       	adc	r31, r31
     6c2:	81 e4       	ldi	r24, 0x41	; 65
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	8c 0f       	add	r24, r28
     6c8:	9d 1f       	adc	r25, r29
     6ca:	e8 0f       	add	r30, r24
     6cc:	f9 1f       	adc	r31, r25
     6ce:	80 81       	ld	r24, Z
     6d0:	91 81       	ldd	r25, Z+1	; 0x01
     6d2:	a2 81       	ldd	r26, Z+2	; 0x02
     6d4:	b3 81       	ldd	r27, Z+3	; 0x03
     6d6:	f9 01       	movw	r30, r18
     6d8:	ee 0f       	add	r30, r30
     6da:	ff 1f       	adc	r31, r31
     6dc:	ee 0f       	add	r30, r30
     6de:	ff 1f       	adc	r31, r31
     6e0:	21 e4       	ldi	r18, 0x41	; 65
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	2c 0f       	add	r18, r28
     6e6:	3d 1f       	adc	r19, r29
     6e8:	e2 0f       	add	r30, r18
     6ea:	f3 1f       	adc	r31, r19
     6ec:	80 83       	st	Z, r24
     6ee:	91 83       	std	Z+1, r25	; 0x01
     6f0:	a2 83       	std	Z+2, r26	; 0x02
     6f2:	b3 83       	std	Z+3, r27	; 0x03
	result = numbers[i] / numbers[i+1];
	}
	
	// Обновляем числа и операторы
	numbers[i] = result;
	for (uint8_t j = i+1; j < num_count-1; j++) {
     6f4:	6f 5f       	subi	r22, 0xFF	; 255
     6f6:	26 2f       	mov	r18, r22
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	24 17       	cp	r18, r20
     6fc:	35 07       	cpc	r19, r21
     6fe:	dc f2       	brlt	.-74     	; 0x6b6 <task_5+0x22e>
	numbers[j] = numbers[j+1];
	}
	num_count--;
     700:	ba 94       	dec	r11
	
	for (uint8_t j = i; j < op_count-1; j++) {
     702:	89 2d       	mov	r24, r9
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	01 97       	sbiw	r24, 0x01	; 1
     708:	08 17       	cp	r16, r24
     70a:	19 07       	cpc	r17, r25
     70c:	7c f4       	brge	.+30     	; 0x72c <task_5+0x2a4>
     70e:	2f 2d       	mov	r18, r15
	operators[j] = operators[j+1];
     710:	e9 e6       	ldi	r30, 0x69	; 105
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	ec 0f       	add	r30, r28
     716:	fd 1f       	adc	r31, r29
     718:	e0 0f       	add	r30, r16
     71a:	f1 1f       	adc	r31, r17
     71c:	31 81       	ldd	r19, Z+1	; 0x01
     71e:	30 83       	st	Z, r19
	for (uint8_t j = i+1; j < num_count-1; j++) {
	numbers[j] = numbers[j+1];
	}
	num_count--;
	
	for (uint8_t j = i; j < op_count-1; j++) {
     720:	2f 5f       	subi	r18, 0xFF	; 255
     722:	02 2f       	mov	r16, r18
     724:	10 e0       	ldi	r17, 0x00	; 0
     726:	08 17       	cp	r16, r24
     728:	19 07       	cpc	r17, r25
     72a:	94 f3       	brlt	.-28     	; 0x710 <task_5+0x288>
	operators[j] = operators[j+1];
	}
	op_count--;
     72c:	9a 94       	dec	r9
	i--; // Повторяем для текущей позиции
     72e:	fa 94       	dec	r15
	UART_SendString("Error: Invalid expression format\r\n");
	return;
	}
	
	// Вычисление выражения (с учетом приоритета */)
	for (uint8_t i = 0; i < op_count; i++) {
     730:	f3 94       	inc	r15
     732:	f9 14       	cp	r15, r9
     734:	08 f4       	brcc	.+2      	; 0x738 <task_5+0x2b0>
     736:	47 cf       	rjmp	.-370    	; 0x5c6 <task_5+0x13e>
	i--; // Повторяем для текущей позиции
	}
	}
	
	// Теперь вычисляем + и -
	float final_result = numbers[0];
     738:	22 96       	adiw	r28, 0x02	; 2
     73a:	6f ad       	ldd	r22, Y+63	; 0x3f
     73c:	22 97       	sbiw	r28, 0x02	; 2
     73e:	23 96       	adiw	r28, 0x03	; 3
     740:	7f ad       	ldd	r23, Y+63	; 0x3f
     742:	23 97       	sbiw	r28, 0x03	; 3
     744:	24 96       	adiw	r28, 0x04	; 4
     746:	8f ad       	ldd	r24, Y+63	; 0x3f
     748:	24 97       	sbiw	r28, 0x04	; 4
     74a:	25 96       	adiw	r28, 0x05	; 5
     74c:	9f ad       	ldd	r25, Y+63	; 0x3f
     74e:	25 97       	sbiw	r28, 0x05	; 5
	for (uint8_t i = 0; i < op_count; i++) {
     750:	99 20       	and	r9, r9
     752:	21 f1       	breq	.+72     	; 0x79c <task_5+0x314>
     754:	5e 01       	movw	r10, r28
     756:	39 e6       	ldi	r19, 0x69	; 105
     758:	a3 0e       	add	r10, r19
     75a:	b1 1c       	adc	r11, r1
     75c:	7e 01       	movw	r14, r28
     75e:	e5 e4       	ldi	r30, 0x45	; 69
     760:	ee 0e       	add	r14, r30
     762:	f1 1c       	adc	r15, r1
     764:	85 01       	movw	r16, r10
	if (operators[i] == '+') {
     766:	f8 01       	movw	r30, r16
     768:	21 91       	ld	r18, Z+
     76a:	8f 01       	movw	r16, r30
     76c:	2b 32       	cpi	r18, 0x2B	; 43
     76e:	41 f4       	brne	.+16     	; 0x780 <task_5+0x2f8>
	final_result += numbers[i+1];
     770:	f7 01       	movw	r30, r14
     772:	20 81       	ld	r18, Z
     774:	31 81       	ldd	r19, Z+1	; 0x01
     776:	42 81       	ldd	r20, Z+2	; 0x02
     778:	53 81       	ldd	r21, Z+3	; 0x03
     77a:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__addsf3>
     77e:	07 c0       	rjmp	.+14     	; 0x78e <task_5+0x306>
	} else {
	final_result -= numbers[i+1];
     780:	f7 01       	movw	r30, r14
     782:	20 81       	ld	r18, Z
     784:	31 81       	ldd	r19, Z+1	; 0x01
     786:	42 81       	ldd	r20, Z+2	; 0x02
     788:	53 81       	ldd	r21, Z+3	; 0x03
     78a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__subsf3>
     78e:	f4 e0       	ldi	r31, 0x04	; 4
     790:	ef 0e       	add	r14, r31
     792:	f1 1c       	adc	r15, r1
     794:	20 2f       	mov	r18, r16
     796:	2a 19       	sub	r18, r10
	}
	}
	
	// Теперь вычисляем + и -
	float final_result = numbers[0];
	for (uint8_t i = 0; i < op_count; i++) {
     798:	29 15       	cp	r18, r9
     79a:	28 f3       	brcs	.-54     	; 0x766 <task_5+0x2de>
	}
	}
	
	// Формирование и отправка ответа
	char response[BUFFER_SIZE];
	snprintf(response, BUFFER_SIZE, "Result: %s = %.2f\r\n", expr, final_result);
     79c:	9f 93       	push	r25
     79e:	8f 93       	push	r24
     7a0:	7f 93       	push	r23
     7a2:	6f 93       	push	r22
     7a4:	df 92       	push	r13
     7a6:	cf 92       	push	r12
     7a8:	8b e5       	ldi	r24, 0x5B	; 91
     7aa:	92 e0       	ldi	r25, 0x02	; 2
     7ac:	9f 93       	push	r25
     7ae:	8f 93       	push	r24
     7b0:	1f 92       	push	r1
     7b2:	80 e4       	ldi	r24, 0x40	; 64
     7b4:	8f 93       	push	r24
     7b6:	8e 01       	movw	r16, r28
     7b8:	0e 58       	subi	r16, 0x8E	; 142
     7ba:	1f 4f       	sbci	r17, 0xFF	; 255
     7bc:	1f 93       	push	r17
     7be:	0f 93       	push	r16
     7c0:	0e 94 90 06 	call	0xd20	; 0xd20 <snprintf>
	UART_SendString(response);
     7c4:	c8 01       	movw	r24, r16
     7c6:	0e 94 8b 00 	call	0x116	; 0x116 <UART_SendString>
     7ca:	0f b6       	in	r0, 0x3f	; 63
     7cc:	f8 94       	cli
     7ce:	de bf       	out	0x3e, r29	; 62
     7d0:	0f be       	out	0x3f, r0	; 63
     7d2:	cd bf       	out	0x3d, r28	; 61
     7d4:	19 c0       	rjmp	.+50     	; 0x808 <task_5+0x380>
	}
	
	// Разбиваем выражение на числа и операторы
	float numbers[10];
	char operators[9];
	uint8_t num_count = 0;
     7d6:	b1 2c       	mov	r11, r1
	numbers[num_count++] = atof(token);
	token = strtok(NULL, "+-*/");
	}
	
	// Извлекаем операторы из исходной строки
	for (char* c = expr; *c && op_count < 9; c++) {
     7d8:	f7 01       	movw	r30, r14
     7da:	81 81       	ldd	r24, Z+1	; 0x01
     7dc:	88 23       	and	r24, r24
     7de:	81 f0       	breq	.+32     	; 0x800 <task_5+0x378>
     7e0:	32 96       	adiw	r30, 0x02	; 2
     7e2:	91 2c       	mov	r9, r1
     7e4:	c9 ce       	rjmp	.-622    	; 0x578 <task_5+0xf0>
	i--; // Повторяем для текущей позиции
	}
	}
	
	// Теперь вычисляем + и -
	float final_result = numbers[0];
     7e6:	22 96       	adiw	r28, 0x02	; 2
     7e8:	6f ad       	ldd	r22, Y+63	; 0x3f
     7ea:	22 97       	sbiw	r28, 0x02	; 2
     7ec:	23 96       	adiw	r28, 0x03	; 3
     7ee:	7f ad       	ldd	r23, Y+63	; 0x3f
     7f0:	23 97       	sbiw	r28, 0x03	; 3
     7f2:	24 96       	adiw	r28, 0x04	; 4
     7f4:	8f ad       	ldd	r24, Y+63	; 0x3f
     7f6:	24 97       	sbiw	r28, 0x04	; 4
     7f8:	25 96       	adiw	r28, 0x05	; 5
     7fa:	9f ad       	ldd	r25, Y+63	; 0x3f
     7fc:	25 97       	sbiw	r28, 0x05	; 5
     7fe:	ce cf       	rjmp	.-100    	; 0x79c <task_5+0x314>
	operators[op_count++] = *c;
	}
	}
	
	// Проверка корректности
	if (num_count != op_count + 1) {
     800:	f1 e0       	ldi	r31, 0x01	; 1
     802:	bf 12       	cpse	r11, r31
     804:	da ce       	rjmp	.-588    	; 0x5ba <task_5+0x132>
     806:	ef cf       	rjmp	.-34     	; 0x7e6 <task_5+0x35e>
	
	// Формирование и отправка ответа
	char response[BUFFER_SIZE];
	snprintf(response, BUFFER_SIZE, "Result: %s = %.2f\r\n", expr, final_result);
	UART_SendString(response);
	}
     808:	cf 54       	subi	r28, 0x4F	; 79
     80a:	df 4f       	sbci	r29, 0xFF	; 255
     80c:	0f b6       	in	r0, 0x3f	; 63
     80e:	f8 94       	cli
     810:	de bf       	out	0x3e, r29	; 62
     812:	0f be       	out	0x3f, r0	; 63
     814:	cd bf       	out	0x3d, r28	; 61
     816:	df 91       	pop	r29
     818:	cf 91       	pop	r28
     81a:	1f 91       	pop	r17
     81c:	0f 91       	pop	r16
     81e:	ff 90       	pop	r15
     820:	ef 90       	pop	r14
     822:	df 90       	pop	r13
     824:	cf 90       	pop	r12
     826:	bf 90       	pop	r11
     828:	af 90       	pop	r10
     82a:	9f 90       	pop	r9
     82c:	7f 90       	pop	r7
     82e:	6f 90       	pop	r6
     830:	5f 90       	pop	r5
     832:	4f 90       	pop	r4
     834:	08 95       	ret

00000836 <choices_task>:

void choices_task(char* buffer) {
    char task = buffer[0];  // Первый символ - номер задачи

    switch (task) {
     836:	fc 01       	movw	r30, r24
     838:	20 81       	ld	r18, Z
     83a:	23 33       	cpi	r18, 0x33	; 51
     83c:	89 f0       	breq	.+34     	; 0x860 <choices_task+0x2a>
     83e:	28 f4       	brcc	.+10     	; 0x84a <choices_task+0x14>
     840:	21 33       	cpi	r18, 0x31	; 49
     842:	41 f0       	breq	.+16     	; 0x854 <choices_task+0x1e>
     844:	22 33       	cpi	r18, 0x32	; 50
     846:	49 f0       	breq	.+18     	; 0x85a <choices_task+0x24>
     848:	14 c0       	rjmp	.+40     	; 0x872 <choices_task+0x3c>
     84a:	24 33       	cpi	r18, 0x34	; 52
     84c:	61 f0       	breq	.+24     	; 0x866 <choices_task+0x30>
     84e:	25 33       	cpi	r18, 0x35	; 53
     850:	69 f0       	breq	.+26     	; 0x86c <choices_task+0x36>
     852:	0f c0       	rjmp	.+30     	; 0x872 <choices_task+0x3c>
        case '1': task_1(buffer); break;
     854:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <task_1>
     858:	08 95       	ret
        case '2': task_2(buffer); break;
     85a:	0e 94 23 01 	call	0x246	; 0x246 <task_2>
     85e:	08 95       	ret
        case '3': task_3(buffer); break;
     860:	0e 94 80 01 	call	0x300	; 0x300 <task_3>
     864:	08 95       	ret
        case '4': task_4(buffer); break;
     866:	0e 94 de 01 	call	0x3bc	; 0x3bc <task_4>
     86a:	08 95       	ret
        case '5': task_5(buffer); break;
     86c:	0e 94 44 02 	call	0x488	; 0x488 <task_5>
     870:	08 95       	ret
        default:
            UART_SendString("Unknown task\r\n");
     872:	8f e6       	ldi	r24, 0x6F	; 111
     874:	92 e0       	ldi	r25, 0x02	; 2
     876:	0e 94 8b 00 	call	0x116	; 0x116 <UART_SendString>
     87a:	08 95       	ret

0000087c <main>:
            break;
    }
}

int main(void) {
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	cd b7       	in	r28, 0x3d	; 61
     882:	de b7       	in	r29, 0x3e	; 62
     884:	c0 54       	subi	r28, 0x40	; 64
     886:	d1 09       	sbc	r29, r1
     888:	0f b6       	in	r0, 0x3f	; 63
     88a:	f8 94       	cli
     88c:	de bf       	out	0x3e, r29	; 62
     88e:	0f be       	out	0x3f, r0	; 63
     890:	cd bf       	out	0x3d, r28	; 61
    char buffer[BUFFER_SIZE];

    // Инициализация UART
    UART_Init();
     892:	0e 94 77 00 	call	0xee	; 0xee <UART_Init>

    while (1) {
        // Прием строки из UART
        UART_ReceiveString(buffer, BUFFER_SIZE);
     896:	60 e4       	ldi	r22, 0x40	; 64
     898:	ce 01       	movw	r24, r28
     89a:	01 96       	adiw	r24, 0x01	; 1
     89c:	0e 94 9a 00 	call	0x134	; 0x134 <UART_ReceiveString>

        // Если данные получены, обрабатываем задачу
        if (strlen(buffer) > 0) {
     8a0:	89 81       	ldd	r24, Y+1	; 0x01
     8a2:	88 23       	and	r24, r24
     8a4:	c1 f3       	breq	.-16     	; 0x896 <main+0x1a>
            choices_task(buffer);
     8a6:	ce 01       	movw	r24, r28
     8a8:	01 96       	adiw	r24, 0x01	; 1
     8aa:	0e 94 1b 04 	call	0x836	; 0x836 <choices_task>
     8ae:	f3 cf       	rjmp	.-26     	; 0x896 <main+0x1a>

000008b0 <__subsf3>:
     8b0:	50 58       	subi	r21, 0x80	; 128

000008b2 <__addsf3>:
     8b2:	bb 27       	eor	r27, r27
     8b4:	aa 27       	eor	r26, r26
     8b6:	0e d0       	rcall	.+28     	; 0x8d4 <__addsf3x>
     8b8:	44 c1       	rjmp	.+648    	; 0xb42 <__fp_round>
     8ba:	35 d1       	rcall	.+618    	; 0xb26 <__fp_pscA>
     8bc:	30 f0       	brcs	.+12     	; 0x8ca <__addsf3+0x18>
     8be:	3a d1       	rcall	.+628    	; 0xb34 <__fp_pscB>
     8c0:	20 f0       	brcs	.+8      	; 0x8ca <__addsf3+0x18>
     8c2:	31 f4       	brne	.+12     	; 0x8d0 <__addsf3+0x1e>
     8c4:	9f 3f       	cpi	r25, 0xFF	; 255
     8c6:	11 f4       	brne	.+4      	; 0x8cc <__addsf3+0x1a>
     8c8:	1e f4       	brtc	.+6      	; 0x8d0 <__addsf3+0x1e>
     8ca:	2a c1       	rjmp	.+596    	; 0xb20 <__fp_nan>
     8cc:	0e f4       	brtc	.+2      	; 0x8d0 <__addsf3+0x1e>
     8ce:	e0 95       	com	r30
     8d0:	e7 fb       	bst	r30, 7
     8d2:	20 c1       	rjmp	.+576    	; 0xb14 <__fp_inf>

000008d4 <__addsf3x>:
     8d4:	e9 2f       	mov	r30, r25
     8d6:	46 d1       	rcall	.+652    	; 0xb64 <__fp_split3>
     8d8:	80 f3       	brcs	.-32     	; 0x8ba <__addsf3+0x8>
     8da:	ba 17       	cp	r27, r26
     8dc:	62 07       	cpc	r22, r18
     8de:	73 07       	cpc	r23, r19
     8e0:	84 07       	cpc	r24, r20
     8e2:	95 07       	cpc	r25, r21
     8e4:	18 f0       	brcs	.+6      	; 0x8ec <__addsf3x+0x18>
     8e6:	71 f4       	brne	.+28     	; 0x904 <__stack+0x5>
     8e8:	9e f5       	brtc	.+102    	; 0x950 <__stack+0x51>
     8ea:	5e c1       	rjmp	.+700    	; 0xba8 <__fp_zero>
     8ec:	0e f4       	brtc	.+2      	; 0x8f0 <__addsf3x+0x1c>
     8ee:	e0 95       	com	r30
     8f0:	0b 2e       	mov	r0, r27
     8f2:	ba 2f       	mov	r27, r26
     8f4:	a0 2d       	mov	r26, r0
     8f6:	0b 01       	movw	r0, r22
     8f8:	b9 01       	movw	r22, r18
     8fa:	90 01       	movw	r18, r0
     8fc:	0c 01       	movw	r0, r24
     8fe:	ca 01       	movw	r24, r20
     900:	a0 01       	movw	r20, r0
     902:	11 24       	eor	r1, r1
     904:	ff 27       	eor	r31, r31
     906:	59 1b       	sub	r21, r25
     908:	99 f0       	breq	.+38     	; 0x930 <__stack+0x31>
     90a:	59 3f       	cpi	r21, 0xF9	; 249
     90c:	50 f4       	brcc	.+20     	; 0x922 <__stack+0x23>
     90e:	50 3e       	cpi	r21, 0xE0	; 224
     910:	68 f1       	brcs	.+90     	; 0x96c <__stack+0x6d>
     912:	1a 16       	cp	r1, r26
     914:	f0 40       	sbci	r31, 0x00	; 0
     916:	a2 2f       	mov	r26, r18
     918:	23 2f       	mov	r18, r19
     91a:	34 2f       	mov	r19, r20
     91c:	44 27       	eor	r20, r20
     91e:	58 5f       	subi	r21, 0xF8	; 248
     920:	f3 cf       	rjmp	.-26     	; 0x908 <__stack+0x9>
     922:	46 95       	lsr	r20
     924:	37 95       	ror	r19
     926:	27 95       	ror	r18
     928:	a7 95       	ror	r26
     92a:	f0 40       	sbci	r31, 0x00	; 0
     92c:	53 95       	inc	r21
     92e:	c9 f7       	brne	.-14     	; 0x922 <__stack+0x23>
     930:	7e f4       	brtc	.+30     	; 0x950 <__stack+0x51>
     932:	1f 16       	cp	r1, r31
     934:	ba 0b       	sbc	r27, r26
     936:	62 0b       	sbc	r22, r18
     938:	73 0b       	sbc	r23, r19
     93a:	84 0b       	sbc	r24, r20
     93c:	ba f0       	brmi	.+46     	; 0x96c <__stack+0x6d>
     93e:	91 50       	subi	r25, 0x01	; 1
     940:	a1 f0       	breq	.+40     	; 0x96a <__stack+0x6b>
     942:	ff 0f       	add	r31, r31
     944:	bb 1f       	adc	r27, r27
     946:	66 1f       	adc	r22, r22
     948:	77 1f       	adc	r23, r23
     94a:	88 1f       	adc	r24, r24
     94c:	c2 f7       	brpl	.-16     	; 0x93e <__stack+0x3f>
     94e:	0e c0       	rjmp	.+28     	; 0x96c <__stack+0x6d>
     950:	ba 0f       	add	r27, r26
     952:	62 1f       	adc	r22, r18
     954:	73 1f       	adc	r23, r19
     956:	84 1f       	adc	r24, r20
     958:	48 f4       	brcc	.+18     	; 0x96c <__stack+0x6d>
     95a:	87 95       	ror	r24
     95c:	77 95       	ror	r23
     95e:	67 95       	ror	r22
     960:	b7 95       	ror	r27
     962:	f7 95       	ror	r31
     964:	9e 3f       	cpi	r25, 0xFE	; 254
     966:	08 f0       	brcs	.+2      	; 0x96a <__stack+0x6b>
     968:	b3 cf       	rjmp	.-154    	; 0x8d0 <__addsf3+0x1e>
     96a:	93 95       	inc	r25
     96c:	88 0f       	add	r24, r24
     96e:	08 f0       	brcs	.+2      	; 0x972 <__stack+0x73>
     970:	99 27       	eor	r25, r25
     972:	ee 0f       	add	r30, r30
     974:	97 95       	ror	r25
     976:	87 95       	ror	r24
     978:	08 95       	ret

0000097a <__cmpsf2>:
     97a:	a8 d0       	rcall	.+336    	; 0xacc <__fp_cmp>
     97c:	08 f4       	brcc	.+2      	; 0x980 <__cmpsf2+0x6>
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	08 95       	ret

00000982 <__divsf3>:
     982:	0c d0       	rcall	.+24     	; 0x99c <__divsf3x>
     984:	de c0       	rjmp	.+444    	; 0xb42 <__fp_round>
     986:	d6 d0       	rcall	.+428    	; 0xb34 <__fp_pscB>
     988:	40 f0       	brcs	.+16     	; 0x99a <__divsf3+0x18>
     98a:	cd d0       	rcall	.+410    	; 0xb26 <__fp_pscA>
     98c:	30 f0       	brcs	.+12     	; 0x99a <__divsf3+0x18>
     98e:	21 f4       	brne	.+8      	; 0x998 <__divsf3+0x16>
     990:	5f 3f       	cpi	r21, 0xFF	; 255
     992:	19 f0       	breq	.+6      	; 0x99a <__divsf3+0x18>
     994:	bf c0       	rjmp	.+382    	; 0xb14 <__fp_inf>
     996:	51 11       	cpse	r21, r1
     998:	08 c1       	rjmp	.+528    	; 0xbaa <__fp_szero>
     99a:	c2 c0       	rjmp	.+388    	; 0xb20 <__fp_nan>

0000099c <__divsf3x>:
     99c:	e3 d0       	rcall	.+454    	; 0xb64 <__fp_split3>
     99e:	98 f3       	brcs	.-26     	; 0x986 <__divsf3+0x4>

000009a0 <__divsf3_pse>:
     9a0:	99 23       	and	r25, r25
     9a2:	c9 f3       	breq	.-14     	; 0x996 <__divsf3+0x14>
     9a4:	55 23       	and	r21, r21
     9a6:	b1 f3       	breq	.-20     	; 0x994 <__divsf3+0x12>
     9a8:	95 1b       	sub	r25, r21
     9aa:	55 0b       	sbc	r21, r21
     9ac:	bb 27       	eor	r27, r27
     9ae:	aa 27       	eor	r26, r26
     9b0:	62 17       	cp	r22, r18
     9b2:	73 07       	cpc	r23, r19
     9b4:	84 07       	cpc	r24, r20
     9b6:	38 f0       	brcs	.+14     	; 0x9c6 <__divsf3_pse+0x26>
     9b8:	9f 5f       	subi	r25, 0xFF	; 255
     9ba:	5f 4f       	sbci	r21, 0xFF	; 255
     9bc:	22 0f       	add	r18, r18
     9be:	33 1f       	adc	r19, r19
     9c0:	44 1f       	adc	r20, r20
     9c2:	aa 1f       	adc	r26, r26
     9c4:	a9 f3       	breq	.-22     	; 0x9b0 <__divsf3_pse+0x10>
     9c6:	33 d0       	rcall	.+102    	; 0xa2e <__divsf3_pse+0x8e>
     9c8:	0e 2e       	mov	r0, r30
     9ca:	3a f0       	brmi	.+14     	; 0x9da <__divsf3_pse+0x3a>
     9cc:	e0 e8       	ldi	r30, 0x80	; 128
     9ce:	30 d0       	rcall	.+96     	; 0xa30 <__divsf3_pse+0x90>
     9d0:	91 50       	subi	r25, 0x01	; 1
     9d2:	50 40       	sbci	r21, 0x00	; 0
     9d4:	e6 95       	lsr	r30
     9d6:	00 1c       	adc	r0, r0
     9d8:	ca f7       	brpl	.-14     	; 0x9cc <__divsf3_pse+0x2c>
     9da:	29 d0       	rcall	.+82     	; 0xa2e <__divsf3_pse+0x8e>
     9dc:	fe 2f       	mov	r31, r30
     9de:	27 d0       	rcall	.+78     	; 0xa2e <__divsf3_pse+0x8e>
     9e0:	66 0f       	add	r22, r22
     9e2:	77 1f       	adc	r23, r23
     9e4:	88 1f       	adc	r24, r24
     9e6:	bb 1f       	adc	r27, r27
     9e8:	26 17       	cp	r18, r22
     9ea:	37 07       	cpc	r19, r23
     9ec:	48 07       	cpc	r20, r24
     9ee:	ab 07       	cpc	r26, r27
     9f0:	b0 e8       	ldi	r27, 0x80	; 128
     9f2:	09 f0       	breq	.+2      	; 0x9f6 <__divsf3_pse+0x56>
     9f4:	bb 0b       	sbc	r27, r27
     9f6:	80 2d       	mov	r24, r0
     9f8:	bf 01       	movw	r22, r30
     9fa:	ff 27       	eor	r31, r31
     9fc:	93 58       	subi	r25, 0x83	; 131
     9fe:	5f 4f       	sbci	r21, 0xFF	; 255
     a00:	2a f0       	brmi	.+10     	; 0xa0c <__divsf3_pse+0x6c>
     a02:	9e 3f       	cpi	r25, 0xFE	; 254
     a04:	51 05       	cpc	r21, r1
     a06:	68 f0       	brcs	.+26     	; 0xa22 <__divsf3_pse+0x82>
     a08:	85 c0       	rjmp	.+266    	; 0xb14 <__fp_inf>
     a0a:	cf c0       	rjmp	.+414    	; 0xbaa <__fp_szero>
     a0c:	5f 3f       	cpi	r21, 0xFF	; 255
     a0e:	ec f3       	brlt	.-6      	; 0xa0a <__divsf3_pse+0x6a>
     a10:	98 3e       	cpi	r25, 0xE8	; 232
     a12:	dc f3       	brlt	.-10     	; 0xa0a <__divsf3_pse+0x6a>
     a14:	86 95       	lsr	r24
     a16:	77 95       	ror	r23
     a18:	67 95       	ror	r22
     a1a:	b7 95       	ror	r27
     a1c:	f7 95       	ror	r31
     a1e:	9f 5f       	subi	r25, 0xFF	; 255
     a20:	c9 f7       	brne	.-14     	; 0xa14 <__divsf3_pse+0x74>
     a22:	88 0f       	add	r24, r24
     a24:	91 1d       	adc	r25, r1
     a26:	96 95       	lsr	r25
     a28:	87 95       	ror	r24
     a2a:	97 f9       	bld	r25, 7
     a2c:	08 95       	ret
     a2e:	e1 e0       	ldi	r30, 0x01	; 1
     a30:	66 0f       	add	r22, r22
     a32:	77 1f       	adc	r23, r23
     a34:	88 1f       	adc	r24, r24
     a36:	bb 1f       	adc	r27, r27
     a38:	62 17       	cp	r22, r18
     a3a:	73 07       	cpc	r23, r19
     a3c:	84 07       	cpc	r24, r20
     a3e:	ba 07       	cpc	r27, r26
     a40:	20 f0       	brcs	.+8      	; 0xa4a <__divsf3_pse+0xaa>
     a42:	62 1b       	sub	r22, r18
     a44:	73 0b       	sbc	r23, r19
     a46:	84 0b       	sbc	r24, r20
     a48:	ba 0b       	sbc	r27, r26
     a4a:	ee 1f       	adc	r30, r30
     a4c:	88 f7       	brcc	.-30     	; 0xa30 <__divsf3_pse+0x90>
     a4e:	e0 95       	com	r30
     a50:	08 95       	ret

00000a52 <__floatunsisf>:
     a52:	e8 94       	clt
     a54:	09 c0       	rjmp	.+18     	; 0xa68 <__floatsisf+0x12>

00000a56 <__floatsisf>:
     a56:	97 fb       	bst	r25, 7
     a58:	3e f4       	brtc	.+14     	; 0xa68 <__floatsisf+0x12>
     a5a:	90 95       	com	r25
     a5c:	80 95       	com	r24
     a5e:	70 95       	com	r23
     a60:	61 95       	neg	r22
     a62:	7f 4f       	sbci	r23, 0xFF	; 255
     a64:	8f 4f       	sbci	r24, 0xFF	; 255
     a66:	9f 4f       	sbci	r25, 0xFF	; 255
     a68:	99 23       	and	r25, r25
     a6a:	a9 f0       	breq	.+42     	; 0xa96 <__floatsisf+0x40>
     a6c:	f9 2f       	mov	r31, r25
     a6e:	96 e9       	ldi	r25, 0x96	; 150
     a70:	bb 27       	eor	r27, r27
     a72:	93 95       	inc	r25
     a74:	f6 95       	lsr	r31
     a76:	87 95       	ror	r24
     a78:	77 95       	ror	r23
     a7a:	67 95       	ror	r22
     a7c:	b7 95       	ror	r27
     a7e:	f1 11       	cpse	r31, r1
     a80:	f8 cf       	rjmp	.-16     	; 0xa72 <__floatsisf+0x1c>
     a82:	fa f4       	brpl	.+62     	; 0xac2 <__floatsisf+0x6c>
     a84:	bb 0f       	add	r27, r27
     a86:	11 f4       	brne	.+4      	; 0xa8c <__floatsisf+0x36>
     a88:	60 ff       	sbrs	r22, 0
     a8a:	1b c0       	rjmp	.+54     	; 0xac2 <__floatsisf+0x6c>
     a8c:	6f 5f       	subi	r22, 0xFF	; 255
     a8e:	7f 4f       	sbci	r23, 0xFF	; 255
     a90:	8f 4f       	sbci	r24, 0xFF	; 255
     a92:	9f 4f       	sbci	r25, 0xFF	; 255
     a94:	16 c0       	rjmp	.+44     	; 0xac2 <__floatsisf+0x6c>
     a96:	88 23       	and	r24, r24
     a98:	11 f0       	breq	.+4      	; 0xa9e <__floatsisf+0x48>
     a9a:	96 e9       	ldi	r25, 0x96	; 150
     a9c:	11 c0       	rjmp	.+34     	; 0xac0 <__floatsisf+0x6a>
     a9e:	77 23       	and	r23, r23
     aa0:	21 f0       	breq	.+8      	; 0xaaa <__floatsisf+0x54>
     aa2:	9e e8       	ldi	r25, 0x8E	; 142
     aa4:	87 2f       	mov	r24, r23
     aa6:	76 2f       	mov	r23, r22
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__floatsisf+0x5e>
     aaa:	66 23       	and	r22, r22
     aac:	71 f0       	breq	.+28     	; 0xaca <__floatsisf+0x74>
     aae:	96 e8       	ldi	r25, 0x86	; 134
     ab0:	86 2f       	mov	r24, r22
     ab2:	70 e0       	ldi	r23, 0x00	; 0
     ab4:	60 e0       	ldi	r22, 0x00	; 0
     ab6:	2a f0       	brmi	.+10     	; 0xac2 <__floatsisf+0x6c>
     ab8:	9a 95       	dec	r25
     aba:	66 0f       	add	r22, r22
     abc:	77 1f       	adc	r23, r23
     abe:	88 1f       	adc	r24, r24
     ac0:	da f7       	brpl	.-10     	; 0xab8 <__floatsisf+0x62>
     ac2:	88 0f       	add	r24, r24
     ac4:	96 95       	lsr	r25
     ac6:	87 95       	ror	r24
     ac8:	97 f9       	bld	r25, 7
     aca:	08 95       	ret

00000acc <__fp_cmp>:
     acc:	99 0f       	add	r25, r25
     ace:	00 08       	sbc	r0, r0
     ad0:	55 0f       	add	r21, r21
     ad2:	aa 0b       	sbc	r26, r26
     ad4:	e0 e8       	ldi	r30, 0x80	; 128
     ad6:	fe ef       	ldi	r31, 0xFE	; 254
     ad8:	16 16       	cp	r1, r22
     ada:	17 06       	cpc	r1, r23
     adc:	e8 07       	cpc	r30, r24
     ade:	f9 07       	cpc	r31, r25
     ae0:	c0 f0       	brcs	.+48     	; 0xb12 <__fp_cmp+0x46>
     ae2:	12 16       	cp	r1, r18
     ae4:	13 06       	cpc	r1, r19
     ae6:	e4 07       	cpc	r30, r20
     ae8:	f5 07       	cpc	r31, r21
     aea:	98 f0       	brcs	.+38     	; 0xb12 <__fp_cmp+0x46>
     aec:	62 1b       	sub	r22, r18
     aee:	73 0b       	sbc	r23, r19
     af0:	84 0b       	sbc	r24, r20
     af2:	95 0b       	sbc	r25, r21
     af4:	39 f4       	brne	.+14     	; 0xb04 <__fp_cmp+0x38>
     af6:	0a 26       	eor	r0, r26
     af8:	61 f0       	breq	.+24     	; 0xb12 <__fp_cmp+0x46>
     afa:	23 2b       	or	r18, r19
     afc:	24 2b       	or	r18, r20
     afe:	25 2b       	or	r18, r21
     b00:	21 f4       	brne	.+8      	; 0xb0a <__fp_cmp+0x3e>
     b02:	08 95       	ret
     b04:	0a 26       	eor	r0, r26
     b06:	09 f4       	brne	.+2      	; 0xb0a <__fp_cmp+0x3e>
     b08:	a1 40       	sbci	r26, 0x01	; 1
     b0a:	a6 95       	lsr	r26
     b0c:	8f ef       	ldi	r24, 0xFF	; 255
     b0e:	81 1d       	adc	r24, r1
     b10:	81 1d       	adc	r24, r1
     b12:	08 95       	ret

00000b14 <__fp_inf>:
     b14:	97 f9       	bld	r25, 7
     b16:	9f 67       	ori	r25, 0x7F	; 127
     b18:	80 e8       	ldi	r24, 0x80	; 128
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	60 e0       	ldi	r22, 0x00	; 0
     b1e:	08 95       	ret

00000b20 <__fp_nan>:
     b20:	9f ef       	ldi	r25, 0xFF	; 255
     b22:	80 ec       	ldi	r24, 0xC0	; 192
     b24:	08 95       	ret

00000b26 <__fp_pscA>:
     b26:	00 24       	eor	r0, r0
     b28:	0a 94       	dec	r0
     b2a:	16 16       	cp	r1, r22
     b2c:	17 06       	cpc	r1, r23
     b2e:	18 06       	cpc	r1, r24
     b30:	09 06       	cpc	r0, r25
     b32:	08 95       	ret

00000b34 <__fp_pscB>:
     b34:	00 24       	eor	r0, r0
     b36:	0a 94       	dec	r0
     b38:	12 16       	cp	r1, r18
     b3a:	13 06       	cpc	r1, r19
     b3c:	14 06       	cpc	r1, r20
     b3e:	05 06       	cpc	r0, r21
     b40:	08 95       	ret

00000b42 <__fp_round>:
     b42:	09 2e       	mov	r0, r25
     b44:	03 94       	inc	r0
     b46:	00 0c       	add	r0, r0
     b48:	11 f4       	brne	.+4      	; 0xb4e <__fp_round+0xc>
     b4a:	88 23       	and	r24, r24
     b4c:	52 f0       	brmi	.+20     	; 0xb62 <__fp_round+0x20>
     b4e:	bb 0f       	add	r27, r27
     b50:	40 f4       	brcc	.+16     	; 0xb62 <__fp_round+0x20>
     b52:	bf 2b       	or	r27, r31
     b54:	11 f4       	brne	.+4      	; 0xb5a <__fp_round+0x18>
     b56:	60 ff       	sbrs	r22, 0
     b58:	04 c0       	rjmp	.+8      	; 0xb62 <__fp_round+0x20>
     b5a:	6f 5f       	subi	r22, 0xFF	; 255
     b5c:	7f 4f       	sbci	r23, 0xFF	; 255
     b5e:	8f 4f       	sbci	r24, 0xFF	; 255
     b60:	9f 4f       	sbci	r25, 0xFF	; 255
     b62:	08 95       	ret

00000b64 <__fp_split3>:
     b64:	57 fd       	sbrc	r21, 7
     b66:	90 58       	subi	r25, 0x80	; 128
     b68:	44 0f       	add	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	59 f0       	breq	.+22     	; 0xb84 <__fp_splitA+0x10>
     b6e:	5f 3f       	cpi	r21, 0xFF	; 255
     b70:	71 f0       	breq	.+28     	; 0xb8e <__fp_splitA+0x1a>
     b72:	47 95       	ror	r20

00000b74 <__fp_splitA>:
     b74:	88 0f       	add	r24, r24
     b76:	97 fb       	bst	r25, 7
     b78:	99 1f       	adc	r25, r25
     b7a:	61 f0       	breq	.+24     	; 0xb94 <__fp_splitA+0x20>
     b7c:	9f 3f       	cpi	r25, 0xFF	; 255
     b7e:	79 f0       	breq	.+30     	; 0xb9e <__fp_splitA+0x2a>
     b80:	87 95       	ror	r24
     b82:	08 95       	ret
     b84:	12 16       	cp	r1, r18
     b86:	13 06       	cpc	r1, r19
     b88:	14 06       	cpc	r1, r20
     b8a:	55 1f       	adc	r21, r21
     b8c:	f2 cf       	rjmp	.-28     	; 0xb72 <__fp_split3+0xe>
     b8e:	46 95       	lsr	r20
     b90:	f1 df       	rcall	.-30     	; 0xb74 <__fp_splitA>
     b92:	08 c0       	rjmp	.+16     	; 0xba4 <__fp_splitA+0x30>
     b94:	16 16       	cp	r1, r22
     b96:	17 06       	cpc	r1, r23
     b98:	18 06       	cpc	r1, r24
     b9a:	99 1f       	adc	r25, r25
     b9c:	f1 cf       	rjmp	.-30     	; 0xb80 <__fp_splitA+0xc>
     b9e:	86 95       	lsr	r24
     ba0:	71 05       	cpc	r23, r1
     ba2:	61 05       	cpc	r22, r1
     ba4:	08 94       	sec
     ba6:	08 95       	ret

00000ba8 <__fp_zero>:
     ba8:	e8 94       	clt

00000baa <__fp_szero>:
     baa:	bb 27       	eor	r27, r27
     bac:	66 27       	eor	r22, r22
     bae:	77 27       	eor	r23, r23
     bb0:	cb 01       	movw	r24, r22
     bb2:	97 f9       	bld	r25, 7
     bb4:	08 95       	ret

00000bb6 <__mulsf3>:
     bb6:	0b d0       	rcall	.+22     	; 0xbce <__mulsf3x>
     bb8:	c4 cf       	rjmp	.-120    	; 0xb42 <__fp_round>
     bba:	b5 df       	rcall	.-150    	; 0xb26 <__fp_pscA>
     bbc:	28 f0       	brcs	.+10     	; 0xbc8 <__mulsf3+0x12>
     bbe:	ba df       	rcall	.-140    	; 0xb34 <__fp_pscB>
     bc0:	18 f0       	brcs	.+6      	; 0xbc8 <__mulsf3+0x12>
     bc2:	95 23       	and	r25, r21
     bc4:	09 f0       	breq	.+2      	; 0xbc8 <__mulsf3+0x12>
     bc6:	a6 cf       	rjmp	.-180    	; 0xb14 <__fp_inf>
     bc8:	ab cf       	rjmp	.-170    	; 0xb20 <__fp_nan>
     bca:	11 24       	eor	r1, r1
     bcc:	ee cf       	rjmp	.-36     	; 0xbaa <__fp_szero>

00000bce <__mulsf3x>:
     bce:	ca df       	rcall	.-108    	; 0xb64 <__fp_split3>
     bd0:	a0 f3       	brcs	.-24     	; 0xbba <__mulsf3+0x4>

00000bd2 <__mulsf3_pse>:
     bd2:	95 9f       	mul	r25, r21
     bd4:	d1 f3       	breq	.-12     	; 0xbca <__mulsf3+0x14>
     bd6:	95 0f       	add	r25, r21
     bd8:	50 e0       	ldi	r21, 0x00	; 0
     bda:	55 1f       	adc	r21, r21
     bdc:	62 9f       	mul	r22, r18
     bde:	f0 01       	movw	r30, r0
     be0:	72 9f       	mul	r23, r18
     be2:	bb 27       	eor	r27, r27
     be4:	f0 0d       	add	r31, r0
     be6:	b1 1d       	adc	r27, r1
     be8:	63 9f       	mul	r22, r19
     bea:	aa 27       	eor	r26, r26
     bec:	f0 0d       	add	r31, r0
     bee:	b1 1d       	adc	r27, r1
     bf0:	aa 1f       	adc	r26, r26
     bf2:	64 9f       	mul	r22, r20
     bf4:	66 27       	eor	r22, r22
     bf6:	b0 0d       	add	r27, r0
     bf8:	a1 1d       	adc	r26, r1
     bfa:	66 1f       	adc	r22, r22
     bfc:	82 9f       	mul	r24, r18
     bfe:	22 27       	eor	r18, r18
     c00:	b0 0d       	add	r27, r0
     c02:	a1 1d       	adc	r26, r1
     c04:	62 1f       	adc	r22, r18
     c06:	73 9f       	mul	r23, r19
     c08:	b0 0d       	add	r27, r0
     c0a:	a1 1d       	adc	r26, r1
     c0c:	62 1f       	adc	r22, r18
     c0e:	83 9f       	mul	r24, r19
     c10:	a0 0d       	add	r26, r0
     c12:	61 1d       	adc	r22, r1
     c14:	22 1f       	adc	r18, r18
     c16:	74 9f       	mul	r23, r20
     c18:	33 27       	eor	r19, r19
     c1a:	a0 0d       	add	r26, r0
     c1c:	61 1d       	adc	r22, r1
     c1e:	23 1f       	adc	r18, r19
     c20:	84 9f       	mul	r24, r20
     c22:	60 0d       	add	r22, r0
     c24:	21 1d       	adc	r18, r1
     c26:	82 2f       	mov	r24, r18
     c28:	76 2f       	mov	r23, r22
     c2a:	6a 2f       	mov	r22, r26
     c2c:	11 24       	eor	r1, r1
     c2e:	9f 57       	subi	r25, 0x7F	; 127
     c30:	50 40       	sbci	r21, 0x00	; 0
     c32:	8a f0       	brmi	.+34     	; 0xc56 <__mulsf3_pse+0x84>
     c34:	e1 f0       	breq	.+56     	; 0xc6e <__mulsf3_pse+0x9c>
     c36:	88 23       	and	r24, r24
     c38:	4a f0       	brmi	.+18     	; 0xc4c <__mulsf3_pse+0x7a>
     c3a:	ee 0f       	add	r30, r30
     c3c:	ff 1f       	adc	r31, r31
     c3e:	bb 1f       	adc	r27, r27
     c40:	66 1f       	adc	r22, r22
     c42:	77 1f       	adc	r23, r23
     c44:	88 1f       	adc	r24, r24
     c46:	91 50       	subi	r25, 0x01	; 1
     c48:	50 40       	sbci	r21, 0x00	; 0
     c4a:	a9 f7       	brne	.-22     	; 0xc36 <__mulsf3_pse+0x64>
     c4c:	9e 3f       	cpi	r25, 0xFE	; 254
     c4e:	51 05       	cpc	r21, r1
     c50:	70 f0       	brcs	.+28     	; 0xc6e <__mulsf3_pse+0x9c>
     c52:	60 cf       	rjmp	.-320    	; 0xb14 <__fp_inf>
     c54:	aa cf       	rjmp	.-172    	; 0xbaa <__fp_szero>
     c56:	5f 3f       	cpi	r21, 0xFF	; 255
     c58:	ec f3       	brlt	.-6      	; 0xc54 <__mulsf3_pse+0x82>
     c5a:	98 3e       	cpi	r25, 0xE8	; 232
     c5c:	dc f3       	brlt	.-10     	; 0xc54 <__mulsf3_pse+0x82>
     c5e:	86 95       	lsr	r24
     c60:	77 95       	ror	r23
     c62:	67 95       	ror	r22
     c64:	b7 95       	ror	r27
     c66:	f7 95       	ror	r31
     c68:	e7 95       	ror	r30
     c6a:	9f 5f       	subi	r25, 0xFF	; 255
     c6c:	c1 f7       	brne	.-16     	; 0xc5e <__mulsf3_pse+0x8c>
     c6e:	fe 2b       	or	r31, r30
     c70:	88 0f       	add	r24, r24
     c72:	91 1d       	adc	r25, r1
     c74:	96 95       	lsr	r25
     c76:	87 95       	ror	r24
     c78:	97 f9       	bld	r25, 7
     c7a:	08 95       	ret

00000c7c <__udivmodqi4>:
     c7c:	99 1b       	sub	r25, r25
     c7e:	79 e0       	ldi	r23, 0x09	; 9
     c80:	04 c0       	rjmp	.+8      	; 0xc8a <__udivmodqi4_ep>

00000c82 <__udivmodqi4_loop>:
     c82:	99 1f       	adc	r25, r25
     c84:	96 17       	cp	r25, r22
     c86:	08 f0       	brcs	.+2      	; 0xc8a <__udivmodqi4_ep>
     c88:	96 1b       	sub	r25, r22

00000c8a <__udivmodqi4_ep>:
     c8a:	88 1f       	adc	r24, r24
     c8c:	7a 95       	dec	r23
     c8e:	c9 f7       	brne	.-14     	; 0xc82 <__udivmodqi4_loop>
     c90:	80 95       	com	r24
     c92:	08 95       	ret

00000c94 <atof>:
     c94:	66 27       	eor	r22, r22
     c96:	77 27       	eor	r23, r23
     c98:	0c 94 60 0b 	jmp	0x16c0	; 0x16c0 <strtod>

00000c9c <strtok>:
     c9c:	4e e7       	ldi	r20, 0x7E	; 126
     c9e:	52 e0       	ldi	r21, 0x02	; 2
     ca0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <strtok_r>
     ca4:	08 95       	ret

00000ca6 <memset>:
     ca6:	dc 01       	movw	r26, r24
     ca8:	01 c0       	rjmp	.+2      	; 0xcac <memset+0x6>
     caa:	6d 93       	st	X+, r22
     cac:	41 50       	subi	r20, 0x01	; 1
     cae:	50 40       	sbci	r21, 0x00	; 0
     cb0:	e0 f7       	brcc	.-8      	; 0xcaa <memset+0x4>
     cb2:	08 95       	ret

00000cb4 <strncpy>:
     cb4:	fb 01       	movw	r30, r22
     cb6:	dc 01       	movw	r26, r24
     cb8:	41 50       	subi	r20, 0x01	; 1
     cba:	50 40       	sbci	r21, 0x00	; 0
     cbc:	48 f0       	brcs	.+18     	; 0xcd0 <strncpy+0x1c>
     cbe:	01 90       	ld	r0, Z+
     cc0:	0d 92       	st	X+, r0
     cc2:	00 20       	and	r0, r0
     cc4:	c9 f7       	brne	.-14     	; 0xcb8 <strncpy+0x4>
     cc6:	01 c0       	rjmp	.+2      	; 0xcca <strncpy+0x16>
     cc8:	1d 92       	st	X+, r1
     cca:	41 50       	subi	r20, 0x01	; 1
     ccc:	50 40       	sbci	r21, 0x00	; 0
     cce:	e0 f7       	brcc	.-8      	; 0xcc8 <strncpy+0x14>
     cd0:	08 95       	ret

00000cd2 <strtok_r>:
     cd2:	fa 01       	movw	r30, r20
     cd4:	a1 91       	ld	r26, Z+
     cd6:	b0 81       	ld	r27, Z
     cd8:	00 97       	sbiw	r24, 0x00	; 0
     cda:	19 f4       	brne	.+6      	; 0xce2 <strtok_r+0x10>
     cdc:	10 97       	sbiw	r26, 0x00	; 0
     cde:	e1 f0       	breq	.+56     	; 0xd18 <strtok_r+0x46>
     ce0:	cd 01       	movw	r24, r26
     ce2:	dc 01       	movw	r26, r24
     ce4:	cd 01       	movw	r24, r26
     ce6:	0d 90       	ld	r0, X+
     ce8:	00 20       	and	r0, r0
     cea:	11 f4       	brne	.+4      	; 0xcf0 <strtok_r+0x1e>
     cec:	c0 01       	movw	r24, r0
     cee:	13 c0       	rjmp	.+38     	; 0xd16 <strtok_r+0x44>
     cf0:	fb 01       	movw	r30, r22
     cf2:	21 91       	ld	r18, Z+
     cf4:	22 23       	and	r18, r18
     cf6:	19 f0       	breq	.+6      	; 0xcfe <strtok_r+0x2c>
     cf8:	20 15       	cp	r18, r0
     cfa:	d9 f7       	brne	.-10     	; 0xcf2 <strtok_r+0x20>
     cfc:	f3 cf       	rjmp	.-26     	; 0xce4 <strtok_r+0x12>
     cfe:	fb 01       	movw	r30, r22
     d00:	21 91       	ld	r18, Z+
     d02:	20 15       	cp	r18, r0
     d04:	19 f4       	brne	.+6      	; 0xd0c <strtok_r+0x3a>
     d06:	1e 92       	st	-X, r1
     d08:	11 96       	adiw	r26, 0x01	; 1
     d0a:	06 c0       	rjmp	.+12     	; 0xd18 <strtok_r+0x46>
     d0c:	22 23       	and	r18, r18
     d0e:	c1 f7       	brne	.-16     	; 0xd00 <strtok_r+0x2e>
     d10:	0d 90       	ld	r0, X+
     d12:	00 20       	and	r0, r0
     d14:	a1 f7       	brne	.-24     	; 0xcfe <strtok_r+0x2c>
     d16:	d0 01       	movw	r26, r0
     d18:	fa 01       	movw	r30, r20
     d1a:	a1 93       	st	Z+, r26
     d1c:	b0 83       	st	Z, r27
     d1e:	08 95       	ret

00000d20 <snprintf>:
     d20:	ae e0       	ldi	r26, 0x0E	; 14
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e6 e9       	ldi	r30, 0x96	; 150
     d26:	f6 e0       	ldi	r31, 0x06	; 6
     d28:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__prologue_saves__+0x1c>
     d2c:	0d 89       	ldd	r16, Y+21	; 0x15
     d2e:	1e 89       	ldd	r17, Y+22	; 0x16
     d30:	8f 89       	ldd	r24, Y+23	; 0x17
     d32:	98 8d       	ldd	r25, Y+24	; 0x18
     d34:	26 e0       	ldi	r18, 0x06	; 6
     d36:	2c 83       	std	Y+4, r18	; 0x04
     d38:	1a 83       	std	Y+2, r17	; 0x02
     d3a:	09 83       	std	Y+1, r16	; 0x01
     d3c:	97 ff       	sbrs	r25, 7
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <snprintf+0x24>
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	90 e8       	ldi	r25, 0x80	; 128
     d44:	01 97       	sbiw	r24, 0x01	; 1
     d46:	9e 83       	std	Y+6, r25	; 0x06
     d48:	8d 83       	std	Y+5, r24	; 0x05
     d4a:	ae 01       	movw	r20, r28
     d4c:	45 5e       	subi	r20, 0xE5	; 229
     d4e:	5f 4f       	sbci	r21, 0xFF	; 255
     d50:	69 8d       	ldd	r22, Y+25	; 0x19
     d52:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d54:	ce 01       	movw	r24, r28
     d56:	01 96       	adiw	r24, 0x01	; 1
     d58:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <vfprintf>
     d5c:	4d 81       	ldd	r20, Y+5	; 0x05
     d5e:	5e 81       	ldd	r21, Y+6	; 0x06
     d60:	57 fd       	sbrc	r21, 7
     d62:	0a c0       	rjmp	.+20     	; 0xd78 <snprintf+0x58>
     d64:	2f 81       	ldd	r18, Y+7	; 0x07
     d66:	38 85       	ldd	r19, Y+8	; 0x08
     d68:	42 17       	cp	r20, r18
     d6a:	53 07       	cpc	r21, r19
     d6c:	0c f4       	brge	.+2      	; 0xd70 <snprintf+0x50>
     d6e:	9a 01       	movw	r18, r20
     d70:	f8 01       	movw	r30, r16
     d72:	e2 0f       	add	r30, r18
     d74:	f3 1f       	adc	r31, r19
     d76:	10 82       	st	Z, r1
     d78:	2e 96       	adiw	r28, 0x0e	; 14
     d7a:	e4 e0       	ldi	r30, 0x04	; 4
     d7c:	0c 94 23 0e 	jmp	0x1c46	; 0x1c46 <__epilogue_restores__+0x1c>

00000d80 <sscanf>:
     d80:	ae e0       	ldi	r26, 0x0E	; 14
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e6 ec       	ldi	r30, 0xC6	; 198
     d86:	f6 e0       	ldi	r31, 0x06	; 6
     d88:	0c 94 09 0e 	jmp	0x1c12	; 0x1c12 <__prologue_saves__+0x20>
     d8c:	85 e0       	ldi	r24, 0x05	; 5
     d8e:	8c 83       	std	Y+4, r24	; 0x04
     d90:	8b 89       	ldd	r24, Y+19	; 0x13
     d92:	9c 89       	ldd	r25, Y+20	; 0x14
     d94:	9a 83       	std	Y+2, r25	; 0x02
     d96:	89 83       	std	Y+1, r24	; 0x01
     d98:	ae 01       	movw	r20, r28
     d9a:	49 5e       	subi	r20, 0xE9	; 233
     d9c:	5f 4f       	sbci	r21, 0xFF	; 255
     d9e:	6d 89       	ldd	r22, Y+21	; 0x15
     da0:	7e 89       	ldd	r23, Y+22	; 0x16
     da2:	ce 01       	movw	r24, r28
     da4:	01 96       	adiw	r24, 0x01	; 1
     da6:	0e 94 29 0a 	call	0x1452	; 0x1452 <vfscanf>
     daa:	2e 96       	adiw	r28, 0x0e	; 14
     dac:	e2 e0       	ldi	r30, 0x02	; 2
     dae:	0c 94 25 0e 	jmp	0x1c4a	; 0x1c4a <__epilogue_restores__+0x20>

00000db2 <vfprintf>:
     db2:	ac e0       	ldi	r26, 0x0C	; 12
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	ef ed       	ldi	r30, 0xDF	; 223
     db8:	f6 e0       	ldi	r31, 0x06	; 6
     dba:	0c 94 f9 0d 	jmp	0x1bf2	; 0x1bf2 <__prologue_saves__>
     dbe:	7c 01       	movw	r14, r24
     dc0:	6b 01       	movw	r12, r22
     dc2:	8a 01       	movw	r16, r20
     dc4:	fc 01       	movw	r30, r24
     dc6:	17 82       	std	Z+7, r1	; 0x07
     dc8:	16 82       	std	Z+6, r1	; 0x06
     dca:	83 81       	ldd	r24, Z+3	; 0x03
     dcc:	81 ff       	sbrs	r24, 1
     dce:	bd c1       	rjmp	.+890    	; 0x114a <vfprintf+0x398>
     dd0:	ce 01       	movw	r24, r28
     dd2:	01 96       	adiw	r24, 0x01	; 1
     dd4:	4c 01       	movw	r8, r24
     dd6:	f7 01       	movw	r30, r14
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	f6 01       	movw	r30, r12
     ddc:	93 fd       	sbrc	r25, 3
     dde:	85 91       	lpm	r24, Z+
     de0:	93 ff       	sbrs	r25, 3
     de2:	81 91       	ld	r24, Z+
     de4:	6f 01       	movw	r12, r30
     de6:	88 23       	and	r24, r24
     de8:	09 f4       	brne	.+2      	; 0xdec <vfprintf+0x3a>
     dea:	ab c1       	rjmp	.+854    	; 0x1142 <vfprintf+0x390>
     dec:	85 32       	cpi	r24, 0x25	; 37
     dee:	39 f4       	brne	.+14     	; 0xdfe <vfprintf+0x4c>
     df0:	93 fd       	sbrc	r25, 3
     df2:	85 91       	lpm	r24, Z+
     df4:	93 ff       	sbrs	r25, 3
     df6:	81 91       	ld	r24, Z+
     df8:	6f 01       	movw	r12, r30
     dfa:	85 32       	cpi	r24, 0x25	; 37
     dfc:	29 f4       	brne	.+10     	; 0xe08 <vfprintf+0x56>
     dfe:	b7 01       	movw	r22, r14
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <fputc>
     e06:	e7 cf       	rjmp	.-50     	; 0xdd6 <vfprintf+0x24>
     e08:	51 2c       	mov	r5, r1
     e0a:	31 2c       	mov	r3, r1
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	20 32       	cpi	r18, 0x20	; 32
     e10:	a0 f4       	brcc	.+40     	; 0xe3a <vfprintf+0x88>
     e12:	8b 32       	cpi	r24, 0x2B	; 43
     e14:	69 f0       	breq	.+26     	; 0xe30 <vfprintf+0x7e>
     e16:	30 f4       	brcc	.+12     	; 0xe24 <vfprintf+0x72>
     e18:	80 32       	cpi	r24, 0x20	; 32
     e1a:	59 f0       	breq	.+22     	; 0xe32 <vfprintf+0x80>
     e1c:	83 32       	cpi	r24, 0x23	; 35
     e1e:	69 f4       	brne	.+26     	; 0xe3a <vfprintf+0x88>
     e20:	20 61       	ori	r18, 0x10	; 16
     e22:	2c c0       	rjmp	.+88     	; 0xe7c <vfprintf+0xca>
     e24:	8d 32       	cpi	r24, 0x2D	; 45
     e26:	39 f0       	breq	.+14     	; 0xe36 <vfprintf+0x84>
     e28:	80 33       	cpi	r24, 0x30	; 48
     e2a:	39 f4       	brne	.+14     	; 0xe3a <vfprintf+0x88>
     e2c:	21 60       	ori	r18, 0x01	; 1
     e2e:	26 c0       	rjmp	.+76     	; 0xe7c <vfprintf+0xca>
     e30:	22 60       	ori	r18, 0x02	; 2
     e32:	24 60       	ori	r18, 0x04	; 4
     e34:	23 c0       	rjmp	.+70     	; 0xe7c <vfprintf+0xca>
     e36:	28 60       	ori	r18, 0x08	; 8
     e38:	21 c0       	rjmp	.+66     	; 0xe7c <vfprintf+0xca>
     e3a:	27 fd       	sbrc	r18, 7
     e3c:	27 c0       	rjmp	.+78     	; 0xe8c <vfprintf+0xda>
     e3e:	30 ed       	ldi	r19, 0xD0	; 208
     e40:	38 0f       	add	r19, r24
     e42:	3a 30       	cpi	r19, 0x0A	; 10
     e44:	78 f4       	brcc	.+30     	; 0xe64 <vfprintf+0xb2>
     e46:	26 ff       	sbrs	r18, 6
     e48:	06 c0       	rjmp	.+12     	; 0xe56 <vfprintf+0xa4>
     e4a:	fa e0       	ldi	r31, 0x0A	; 10
     e4c:	5f 9e       	mul	r5, r31
     e4e:	30 0d       	add	r19, r0
     e50:	11 24       	eor	r1, r1
     e52:	53 2e       	mov	r5, r19
     e54:	13 c0       	rjmp	.+38     	; 0xe7c <vfprintf+0xca>
     e56:	8a e0       	ldi	r24, 0x0A	; 10
     e58:	38 9e       	mul	r3, r24
     e5a:	30 0d       	add	r19, r0
     e5c:	11 24       	eor	r1, r1
     e5e:	33 2e       	mov	r3, r19
     e60:	20 62       	ori	r18, 0x20	; 32
     e62:	0c c0       	rjmp	.+24     	; 0xe7c <vfprintf+0xca>
     e64:	8e 32       	cpi	r24, 0x2E	; 46
     e66:	21 f4       	brne	.+8      	; 0xe70 <vfprintf+0xbe>
     e68:	26 fd       	sbrc	r18, 6
     e6a:	6b c1       	rjmp	.+726    	; 0x1142 <vfprintf+0x390>
     e6c:	20 64       	ori	r18, 0x40	; 64
     e6e:	06 c0       	rjmp	.+12     	; 0xe7c <vfprintf+0xca>
     e70:	8c 36       	cpi	r24, 0x6C	; 108
     e72:	11 f4       	brne	.+4      	; 0xe78 <vfprintf+0xc6>
     e74:	20 68       	ori	r18, 0x80	; 128
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <vfprintf+0xca>
     e78:	88 36       	cpi	r24, 0x68	; 104
     e7a:	41 f4       	brne	.+16     	; 0xe8c <vfprintf+0xda>
     e7c:	f6 01       	movw	r30, r12
     e7e:	93 fd       	sbrc	r25, 3
     e80:	85 91       	lpm	r24, Z+
     e82:	93 ff       	sbrs	r25, 3
     e84:	81 91       	ld	r24, Z+
     e86:	6f 01       	movw	r12, r30
     e88:	81 11       	cpse	r24, r1
     e8a:	c1 cf       	rjmp	.-126    	; 0xe0e <vfprintf+0x5c>
     e8c:	98 2f       	mov	r25, r24
     e8e:	9f 7d       	andi	r25, 0xDF	; 223
     e90:	95 54       	subi	r25, 0x45	; 69
     e92:	93 30       	cpi	r25, 0x03	; 3
     e94:	28 f4       	brcc	.+10     	; 0xea0 <vfprintf+0xee>
     e96:	0c 5f       	subi	r16, 0xFC	; 252
     e98:	1f 4f       	sbci	r17, 0xFF	; 255
     e9a:	ff e3       	ldi	r31, 0x3F	; 63
     e9c:	f9 83       	std	Y+1, r31	; 0x01
     e9e:	0d c0       	rjmp	.+26     	; 0xeba <vfprintf+0x108>
     ea0:	83 36       	cpi	r24, 0x63	; 99
     ea2:	31 f0       	breq	.+12     	; 0xeb0 <vfprintf+0xfe>
     ea4:	83 37       	cpi	r24, 0x73	; 115
     ea6:	71 f0       	breq	.+28     	; 0xec4 <vfprintf+0x112>
     ea8:	83 35       	cpi	r24, 0x53	; 83
     eaa:	09 f0       	breq	.+2      	; 0xeae <vfprintf+0xfc>
     eac:	5b c0       	rjmp	.+182    	; 0xf64 <vfprintf+0x1b2>
     eae:	22 c0       	rjmp	.+68     	; 0xef4 <vfprintf+0x142>
     eb0:	f8 01       	movw	r30, r16
     eb2:	80 81       	ld	r24, Z
     eb4:	89 83       	std	Y+1, r24	; 0x01
     eb6:	0e 5f       	subi	r16, 0xFE	; 254
     eb8:	1f 4f       	sbci	r17, 0xFF	; 255
     eba:	44 24       	eor	r4, r4
     ebc:	43 94       	inc	r4
     ebe:	51 2c       	mov	r5, r1
     ec0:	54 01       	movw	r10, r8
     ec2:	15 c0       	rjmp	.+42     	; 0xeee <vfprintf+0x13c>
     ec4:	38 01       	movw	r6, r16
     ec6:	f2 e0       	ldi	r31, 0x02	; 2
     ec8:	6f 0e       	add	r6, r31
     eca:	71 1c       	adc	r7, r1
     ecc:	f8 01       	movw	r30, r16
     ece:	a0 80       	ld	r10, Z
     ed0:	b1 80       	ldd	r11, Z+1	; 0x01
     ed2:	26 ff       	sbrs	r18, 6
     ed4:	03 c0       	rjmp	.+6      	; 0xedc <vfprintf+0x12a>
     ed6:	65 2d       	mov	r22, r5
     ed8:	70 e0       	ldi	r23, 0x00	; 0
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <vfprintf+0x12e>
     edc:	6f ef       	ldi	r22, 0xFF	; 255
     ede:	7f ef       	ldi	r23, 0xFF	; 255
     ee0:	c5 01       	movw	r24, r10
     ee2:	2c 87       	std	Y+12, r18	; 0x0c
     ee4:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <strnlen>
     ee8:	2c 01       	movw	r4, r24
     eea:	83 01       	movw	r16, r6
     eec:	2c 85       	ldd	r18, Y+12	; 0x0c
     eee:	2f 77       	andi	r18, 0x7F	; 127
     ef0:	22 2e       	mov	r2, r18
     ef2:	17 c0       	rjmp	.+46     	; 0xf22 <vfprintf+0x170>
     ef4:	38 01       	movw	r6, r16
     ef6:	f2 e0       	ldi	r31, 0x02	; 2
     ef8:	6f 0e       	add	r6, r31
     efa:	71 1c       	adc	r7, r1
     efc:	f8 01       	movw	r30, r16
     efe:	a0 80       	ld	r10, Z
     f00:	b1 80       	ldd	r11, Z+1	; 0x01
     f02:	26 ff       	sbrs	r18, 6
     f04:	03 c0       	rjmp	.+6      	; 0xf0c <vfprintf+0x15a>
     f06:	65 2d       	mov	r22, r5
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <vfprintf+0x15e>
     f0c:	6f ef       	ldi	r22, 0xFF	; 255
     f0e:	7f ef       	ldi	r23, 0xFF	; 255
     f10:	c5 01       	movw	r24, r10
     f12:	2c 87       	std	Y+12, r18	; 0x0c
     f14:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <strnlen_P>
     f18:	2c 01       	movw	r4, r24
     f1a:	2c 85       	ldd	r18, Y+12	; 0x0c
     f1c:	20 68       	ori	r18, 0x80	; 128
     f1e:	22 2e       	mov	r2, r18
     f20:	83 01       	movw	r16, r6
     f22:	23 fc       	sbrc	r2, 3
     f24:	1b c0       	rjmp	.+54     	; 0xf5c <vfprintf+0x1aa>
     f26:	83 2d       	mov	r24, r3
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	48 16       	cp	r4, r24
     f2c:	59 06       	cpc	r5, r25
     f2e:	b0 f4       	brcc	.+44     	; 0xf5c <vfprintf+0x1aa>
     f30:	b7 01       	movw	r22, r14
     f32:	80 e2       	ldi	r24, 0x20	; 32
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <fputc>
     f3a:	3a 94       	dec	r3
     f3c:	f4 cf       	rjmp	.-24     	; 0xf26 <vfprintf+0x174>
     f3e:	f5 01       	movw	r30, r10
     f40:	27 fc       	sbrc	r2, 7
     f42:	85 91       	lpm	r24, Z+
     f44:	27 fe       	sbrs	r2, 7
     f46:	81 91       	ld	r24, Z+
     f48:	5f 01       	movw	r10, r30
     f4a:	b7 01       	movw	r22, r14
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <fputc>
     f52:	31 10       	cpse	r3, r1
     f54:	3a 94       	dec	r3
     f56:	f1 e0       	ldi	r31, 0x01	; 1
     f58:	4f 1a       	sub	r4, r31
     f5a:	51 08       	sbc	r5, r1
     f5c:	41 14       	cp	r4, r1
     f5e:	51 04       	cpc	r5, r1
     f60:	71 f7       	brne	.-36     	; 0xf3e <vfprintf+0x18c>
     f62:	e5 c0       	rjmp	.+458    	; 0x112e <vfprintf+0x37c>
     f64:	84 36       	cpi	r24, 0x64	; 100
     f66:	11 f0       	breq	.+4      	; 0xf6c <vfprintf+0x1ba>
     f68:	89 36       	cpi	r24, 0x69	; 105
     f6a:	39 f5       	brne	.+78     	; 0xfba <vfprintf+0x208>
     f6c:	f8 01       	movw	r30, r16
     f6e:	27 ff       	sbrs	r18, 7
     f70:	07 c0       	rjmp	.+14     	; 0xf80 <vfprintf+0x1ce>
     f72:	60 81       	ld	r22, Z
     f74:	71 81       	ldd	r23, Z+1	; 0x01
     f76:	82 81       	ldd	r24, Z+2	; 0x02
     f78:	93 81       	ldd	r25, Z+3	; 0x03
     f7a:	0c 5f       	subi	r16, 0xFC	; 252
     f7c:	1f 4f       	sbci	r17, 0xFF	; 255
     f7e:	08 c0       	rjmp	.+16     	; 0xf90 <vfprintf+0x1de>
     f80:	60 81       	ld	r22, Z
     f82:	71 81       	ldd	r23, Z+1	; 0x01
     f84:	88 27       	eor	r24, r24
     f86:	77 fd       	sbrc	r23, 7
     f88:	80 95       	com	r24
     f8a:	98 2f       	mov	r25, r24
     f8c:	0e 5f       	subi	r16, 0xFE	; 254
     f8e:	1f 4f       	sbci	r17, 0xFF	; 255
     f90:	2f 76       	andi	r18, 0x6F	; 111
     f92:	b2 2e       	mov	r11, r18
     f94:	97 ff       	sbrs	r25, 7
     f96:	09 c0       	rjmp	.+18     	; 0xfaa <vfprintf+0x1f8>
     f98:	90 95       	com	r25
     f9a:	80 95       	com	r24
     f9c:	70 95       	com	r23
     f9e:	61 95       	neg	r22
     fa0:	7f 4f       	sbci	r23, 0xFF	; 255
     fa2:	8f 4f       	sbci	r24, 0xFF	; 255
     fa4:	9f 4f       	sbci	r25, 0xFF	; 255
     fa6:	20 68       	ori	r18, 0x80	; 128
     fa8:	b2 2e       	mov	r11, r18
     faa:	2a e0       	ldi	r18, 0x0A	; 10
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	a4 01       	movw	r20, r8
     fb0:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__ultoa_invert>
     fb4:	a8 2e       	mov	r10, r24
     fb6:	a8 18       	sub	r10, r8
     fb8:	44 c0       	rjmp	.+136    	; 0x1042 <vfprintf+0x290>
     fba:	85 37       	cpi	r24, 0x75	; 117
     fbc:	29 f4       	brne	.+10     	; 0xfc8 <vfprintf+0x216>
     fbe:	2f 7e       	andi	r18, 0xEF	; 239
     fc0:	b2 2e       	mov	r11, r18
     fc2:	2a e0       	ldi	r18, 0x0A	; 10
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	25 c0       	rjmp	.+74     	; 0x1012 <vfprintf+0x260>
     fc8:	f2 2f       	mov	r31, r18
     fca:	f9 7f       	andi	r31, 0xF9	; 249
     fcc:	bf 2e       	mov	r11, r31
     fce:	8f 36       	cpi	r24, 0x6F	; 111
     fd0:	c1 f0       	breq	.+48     	; 0x1002 <vfprintf+0x250>
     fd2:	18 f4       	brcc	.+6      	; 0xfda <vfprintf+0x228>
     fd4:	88 35       	cpi	r24, 0x58	; 88
     fd6:	79 f0       	breq	.+30     	; 0xff6 <vfprintf+0x244>
     fd8:	b4 c0       	rjmp	.+360    	; 0x1142 <vfprintf+0x390>
     fda:	80 37       	cpi	r24, 0x70	; 112
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <vfprintf+0x232>
     fde:	88 37       	cpi	r24, 0x78	; 120
     fe0:	21 f0       	breq	.+8      	; 0xfea <vfprintf+0x238>
     fe2:	af c0       	rjmp	.+350    	; 0x1142 <vfprintf+0x390>
     fe4:	2f 2f       	mov	r18, r31
     fe6:	20 61       	ori	r18, 0x10	; 16
     fe8:	b2 2e       	mov	r11, r18
     fea:	b4 fe       	sbrs	r11, 4
     fec:	0d c0       	rjmp	.+26     	; 0x1008 <vfprintf+0x256>
     fee:	8b 2d       	mov	r24, r11
     ff0:	84 60       	ori	r24, 0x04	; 4
     ff2:	b8 2e       	mov	r11, r24
     ff4:	09 c0       	rjmp	.+18     	; 0x1008 <vfprintf+0x256>
     ff6:	24 ff       	sbrs	r18, 4
     ff8:	0a c0       	rjmp	.+20     	; 0x100e <vfprintf+0x25c>
     ffa:	9f 2f       	mov	r25, r31
     ffc:	96 60       	ori	r25, 0x06	; 6
     ffe:	b9 2e       	mov	r11, r25
    1000:	06 c0       	rjmp	.+12     	; 0x100e <vfprintf+0x25c>
    1002:	28 e0       	ldi	r18, 0x08	; 8
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	05 c0       	rjmp	.+10     	; 0x1012 <vfprintf+0x260>
    1008:	20 e1       	ldi	r18, 0x10	; 16
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <vfprintf+0x260>
    100e:	20 e1       	ldi	r18, 0x10	; 16
    1010:	32 e0       	ldi	r19, 0x02	; 2
    1012:	f8 01       	movw	r30, r16
    1014:	b7 fe       	sbrs	r11, 7
    1016:	07 c0       	rjmp	.+14     	; 0x1026 <vfprintf+0x274>
    1018:	60 81       	ld	r22, Z
    101a:	71 81       	ldd	r23, Z+1	; 0x01
    101c:	82 81       	ldd	r24, Z+2	; 0x02
    101e:	93 81       	ldd	r25, Z+3	; 0x03
    1020:	0c 5f       	subi	r16, 0xFC	; 252
    1022:	1f 4f       	sbci	r17, 0xFF	; 255
    1024:	06 c0       	rjmp	.+12     	; 0x1032 <vfprintf+0x280>
    1026:	60 81       	ld	r22, Z
    1028:	71 81       	ldd	r23, Z+1	; 0x01
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	0e 5f       	subi	r16, 0xFE	; 254
    1030:	1f 4f       	sbci	r17, 0xFF	; 255
    1032:	a4 01       	movw	r20, r8
    1034:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__ultoa_invert>
    1038:	a8 2e       	mov	r10, r24
    103a:	a8 18       	sub	r10, r8
    103c:	fb 2d       	mov	r31, r11
    103e:	ff 77       	andi	r31, 0x7F	; 127
    1040:	bf 2e       	mov	r11, r31
    1042:	b6 fe       	sbrs	r11, 6
    1044:	0b c0       	rjmp	.+22     	; 0x105c <vfprintf+0x2aa>
    1046:	2b 2d       	mov	r18, r11
    1048:	2e 7f       	andi	r18, 0xFE	; 254
    104a:	a5 14       	cp	r10, r5
    104c:	50 f4       	brcc	.+20     	; 0x1062 <vfprintf+0x2b0>
    104e:	b4 fe       	sbrs	r11, 4
    1050:	0a c0       	rjmp	.+20     	; 0x1066 <vfprintf+0x2b4>
    1052:	b2 fc       	sbrc	r11, 2
    1054:	08 c0       	rjmp	.+16     	; 0x1066 <vfprintf+0x2b4>
    1056:	2b 2d       	mov	r18, r11
    1058:	2e 7e       	andi	r18, 0xEE	; 238
    105a:	05 c0       	rjmp	.+10     	; 0x1066 <vfprintf+0x2b4>
    105c:	7a 2c       	mov	r7, r10
    105e:	2b 2d       	mov	r18, r11
    1060:	03 c0       	rjmp	.+6      	; 0x1068 <vfprintf+0x2b6>
    1062:	7a 2c       	mov	r7, r10
    1064:	01 c0       	rjmp	.+2      	; 0x1068 <vfprintf+0x2b6>
    1066:	75 2c       	mov	r7, r5
    1068:	24 ff       	sbrs	r18, 4
    106a:	0d c0       	rjmp	.+26     	; 0x1086 <vfprintf+0x2d4>
    106c:	fe 01       	movw	r30, r28
    106e:	ea 0d       	add	r30, r10
    1070:	f1 1d       	adc	r31, r1
    1072:	80 81       	ld	r24, Z
    1074:	80 33       	cpi	r24, 0x30	; 48
    1076:	11 f4       	brne	.+4      	; 0x107c <vfprintf+0x2ca>
    1078:	29 7e       	andi	r18, 0xE9	; 233
    107a:	09 c0       	rjmp	.+18     	; 0x108e <vfprintf+0x2dc>
    107c:	22 ff       	sbrs	r18, 2
    107e:	06 c0       	rjmp	.+12     	; 0x108c <vfprintf+0x2da>
    1080:	73 94       	inc	r7
    1082:	73 94       	inc	r7
    1084:	04 c0       	rjmp	.+8      	; 0x108e <vfprintf+0x2dc>
    1086:	82 2f       	mov	r24, r18
    1088:	86 78       	andi	r24, 0x86	; 134
    108a:	09 f0       	breq	.+2      	; 0x108e <vfprintf+0x2dc>
    108c:	73 94       	inc	r7
    108e:	23 fd       	sbrc	r18, 3
    1090:	13 c0       	rjmp	.+38     	; 0x10b8 <vfprintf+0x306>
    1092:	20 ff       	sbrs	r18, 0
    1094:	06 c0       	rjmp	.+12     	; 0x10a2 <vfprintf+0x2f0>
    1096:	5a 2c       	mov	r5, r10
    1098:	73 14       	cp	r7, r3
    109a:	18 f4       	brcc	.+6      	; 0x10a2 <vfprintf+0x2f0>
    109c:	53 0c       	add	r5, r3
    109e:	57 18       	sub	r5, r7
    10a0:	73 2c       	mov	r7, r3
    10a2:	73 14       	cp	r7, r3
    10a4:	68 f4       	brcc	.+26     	; 0x10c0 <vfprintf+0x30e>
    10a6:	b7 01       	movw	r22, r14
    10a8:	80 e2       	ldi	r24, 0x20	; 32
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	2c 87       	std	Y+12, r18	; 0x0c
    10ae:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <fputc>
    10b2:	73 94       	inc	r7
    10b4:	2c 85       	ldd	r18, Y+12	; 0x0c
    10b6:	f5 cf       	rjmp	.-22     	; 0x10a2 <vfprintf+0x2f0>
    10b8:	73 14       	cp	r7, r3
    10ba:	10 f4       	brcc	.+4      	; 0x10c0 <vfprintf+0x30e>
    10bc:	37 18       	sub	r3, r7
    10be:	01 c0       	rjmp	.+2      	; 0x10c2 <vfprintf+0x310>
    10c0:	31 2c       	mov	r3, r1
    10c2:	24 ff       	sbrs	r18, 4
    10c4:	12 c0       	rjmp	.+36     	; 0x10ea <vfprintf+0x338>
    10c6:	b7 01       	movw	r22, r14
    10c8:	80 e3       	ldi	r24, 0x30	; 48
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	2c 87       	std	Y+12, r18	; 0x0c
    10ce:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <fputc>
    10d2:	2c 85       	ldd	r18, Y+12	; 0x0c
    10d4:	22 ff       	sbrs	r18, 2
    10d6:	17 c0       	rjmp	.+46     	; 0x1106 <vfprintf+0x354>
    10d8:	21 ff       	sbrs	r18, 1
    10da:	03 c0       	rjmp	.+6      	; 0x10e2 <vfprintf+0x330>
    10dc:	88 e5       	ldi	r24, 0x58	; 88
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <vfprintf+0x334>
    10e2:	88 e7       	ldi	r24, 0x78	; 120
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	b7 01       	movw	r22, r14
    10e8:	0c c0       	rjmp	.+24     	; 0x1102 <vfprintf+0x350>
    10ea:	82 2f       	mov	r24, r18
    10ec:	86 78       	andi	r24, 0x86	; 134
    10ee:	59 f0       	breq	.+22     	; 0x1106 <vfprintf+0x354>
    10f0:	21 fd       	sbrc	r18, 1
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <vfprintf+0x346>
    10f4:	80 e2       	ldi	r24, 0x20	; 32
    10f6:	01 c0       	rjmp	.+2      	; 0x10fa <vfprintf+0x348>
    10f8:	8b e2       	ldi	r24, 0x2B	; 43
    10fa:	27 fd       	sbrc	r18, 7
    10fc:	8d e2       	ldi	r24, 0x2D	; 45
    10fe:	b7 01       	movw	r22, r14
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <fputc>
    1106:	a5 14       	cp	r10, r5
    1108:	38 f4       	brcc	.+14     	; 0x1118 <vfprintf+0x366>
    110a:	b7 01       	movw	r22, r14
    110c:	80 e3       	ldi	r24, 0x30	; 48
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <fputc>
    1114:	5a 94       	dec	r5
    1116:	f7 cf       	rjmp	.-18     	; 0x1106 <vfprintf+0x354>
    1118:	aa 94       	dec	r10
    111a:	f4 01       	movw	r30, r8
    111c:	ea 0d       	add	r30, r10
    111e:	f1 1d       	adc	r31, r1
    1120:	80 81       	ld	r24, Z
    1122:	b7 01       	movw	r22, r14
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <fputc>
    112a:	a1 10       	cpse	r10, r1
    112c:	f5 cf       	rjmp	.-22     	; 0x1118 <vfprintf+0x366>
    112e:	33 20       	and	r3, r3
    1130:	09 f4       	brne	.+2      	; 0x1134 <vfprintf+0x382>
    1132:	51 ce       	rjmp	.-862    	; 0xdd6 <vfprintf+0x24>
    1134:	b7 01       	movw	r22, r14
    1136:	80 e2       	ldi	r24, 0x20	; 32
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <fputc>
    113e:	3a 94       	dec	r3
    1140:	f6 cf       	rjmp	.-20     	; 0x112e <vfprintf+0x37c>
    1142:	f7 01       	movw	r30, r14
    1144:	86 81       	ldd	r24, Z+6	; 0x06
    1146:	97 81       	ldd	r25, Z+7	; 0x07
    1148:	02 c0       	rjmp	.+4      	; 0x114e <vfprintf+0x39c>
    114a:	8f ef       	ldi	r24, 0xFF	; 255
    114c:	9f ef       	ldi	r25, 0xFF	; 255
    114e:	2c 96       	adiw	r28, 0x0c	; 12
    1150:	e2 e1       	ldi	r30, 0x12	; 18
    1152:	0c 94 15 0e 	jmp	0x1c2a	; 0x1c2a <__epilogue_restores__>

00001156 <putval>:
    1156:	20 fd       	sbrc	r18, 0
    1158:	09 c0       	rjmp	.+18     	; 0x116c <putval+0x16>
    115a:	fc 01       	movw	r30, r24
    115c:	23 fd       	sbrc	r18, 3
    115e:	05 c0       	rjmp	.+10     	; 0x116a <putval+0x14>
    1160:	22 ff       	sbrs	r18, 2
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <putval+0x12>
    1164:	73 83       	std	Z+3, r23	; 0x03
    1166:	62 83       	std	Z+2, r22	; 0x02
    1168:	51 83       	std	Z+1, r21	; 0x01
    116a:	40 83       	st	Z, r20
    116c:	08 95       	ret

0000116e <mulacc>:
    116e:	44 fd       	sbrc	r20, 4
    1170:	10 c0       	rjmp	.+32     	; 0x1192 <mulacc+0x24>
    1172:	46 fd       	sbrc	r20, 6
    1174:	10 c0       	rjmp	.+32     	; 0x1196 <mulacc+0x28>
    1176:	db 01       	movw	r26, r22
    1178:	fc 01       	movw	r30, r24
    117a:	aa 0f       	add	r26, r26
    117c:	bb 1f       	adc	r27, r27
    117e:	ee 1f       	adc	r30, r30
    1180:	ff 1f       	adc	r31, r31
    1182:	10 94       	com	r1
    1184:	d1 f7       	brne	.-12     	; 0x117a <mulacc+0xc>
    1186:	6a 0f       	add	r22, r26
    1188:	7b 1f       	adc	r23, r27
    118a:	8e 1f       	adc	r24, r30
    118c:	9f 1f       	adc	r25, r31
    118e:	31 e0       	ldi	r19, 0x01	; 1
    1190:	03 c0       	rjmp	.+6      	; 0x1198 <mulacc+0x2a>
    1192:	33 e0       	ldi	r19, 0x03	; 3
    1194:	01 c0       	rjmp	.+2      	; 0x1198 <mulacc+0x2a>
    1196:	34 e0       	ldi	r19, 0x04	; 4
    1198:	66 0f       	add	r22, r22
    119a:	77 1f       	adc	r23, r23
    119c:	88 1f       	adc	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	31 50       	subi	r19, 0x01	; 1
    11a2:	d1 f7       	brne	.-12     	; 0x1198 <mulacc+0x2a>
    11a4:	62 0f       	add	r22, r18
    11a6:	71 1d       	adc	r23, r1
    11a8:	81 1d       	adc	r24, r1
    11aa:	91 1d       	adc	r25, r1
    11ac:	08 95       	ret

000011ae <skip_spaces>:
    11ae:	0f 93       	push	r16
    11b0:	1f 93       	push	r17
    11b2:	cf 93       	push	r28
    11b4:	df 93       	push	r29
    11b6:	8c 01       	movw	r16, r24
    11b8:	c8 01       	movw	r24, r16
    11ba:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <fgetc>
    11be:	ec 01       	movw	r28, r24
    11c0:	97 fd       	sbrc	r25, 7
    11c2:	08 c0       	rjmp	.+16     	; 0x11d4 <skip_spaces+0x26>
    11c4:	0e 94 c3 0c 	call	0x1986	; 0x1986 <isspace>
    11c8:	89 2b       	or	r24, r25
    11ca:	b1 f7       	brne	.-20     	; 0x11b8 <skip_spaces+0xa>
    11cc:	b8 01       	movw	r22, r16
    11ce:	ce 01       	movw	r24, r28
    11d0:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <ungetc>
    11d4:	ce 01       	movw	r24, r28
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	1f 91       	pop	r17
    11dc:	0f 91       	pop	r16
    11de:	08 95       	ret

000011e0 <conv_int>:
    11e0:	8f 92       	push	r8
    11e2:	9f 92       	push	r9
    11e4:	af 92       	push	r10
    11e6:	cf 92       	push	r12
    11e8:	df 92       	push	r13
    11ea:	ef 92       	push	r14
    11ec:	ff 92       	push	r15
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	ec 01       	movw	r28, r24
    11f8:	a6 2e       	mov	r10, r22
    11fa:	4a 01       	movw	r8, r20
    11fc:	02 2f       	mov	r16, r18
    11fe:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <fgetc>
    1202:	ac 01       	movw	r20, r24
    1204:	55 27       	eor	r21, r21
    1206:	4b 32       	cpi	r20, 0x2B	; 43
    1208:	51 05       	cpc	r21, r1
    120a:	21 f0       	breq	.+8      	; 0x1214 <conv_int+0x34>
    120c:	4d 32       	cpi	r20, 0x2D	; 45
    120e:	51 05       	cpc	r21, r1
    1210:	51 f4       	brne	.+20     	; 0x1226 <conv_int+0x46>
    1212:	00 68       	ori	r16, 0x80	; 128
    1214:	aa 94       	dec	r10
    1216:	11 f4       	brne	.+4      	; 0x121c <conv_int+0x3c>
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	67 c0       	rjmp	.+206    	; 0x12ea <conv_int+0x10a>
    121c:	ce 01       	movw	r24, r28
    121e:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <fgetc>
    1222:	97 fd       	sbrc	r25, 7
    1224:	f9 cf       	rjmp	.-14     	; 0x1218 <conv_int+0x38>
    1226:	10 2f       	mov	r17, r16
    1228:	1d 7f       	andi	r17, 0xFD	; 253
    122a:	30 2f       	mov	r19, r16
    122c:	30 73       	andi	r19, 0x30	; 48
    122e:	01 f5       	brne	.+64     	; 0x1270 <conv_int+0x90>
    1230:	80 33       	cpi	r24, 0x30	; 48
    1232:	f1 f4       	brne	.+60     	; 0x1270 <conv_int+0x90>
    1234:	ff 24       	eor	r15, r15
    1236:	fa 94       	dec	r15
    1238:	fa 0c       	add	r15, r10
    123a:	09 f4       	brne	.+2      	; 0x123e <conv_int+0x5e>
    123c:	42 c0       	rjmp	.+132    	; 0x12c2 <conv_int+0xe2>
    123e:	ce 01       	movw	r24, r28
    1240:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <fgetc>
    1244:	97 fd       	sbrc	r25, 7
    1246:	3d c0       	rjmp	.+122    	; 0x12c2 <conv_int+0xe2>
    1248:	38 2f       	mov	r19, r24
    124a:	3f 7d       	andi	r19, 0xDF	; 223
    124c:	38 35       	cpi	r19, 0x58	; 88
    124e:	51 f4       	brne	.+20     	; 0x1264 <conv_int+0x84>
    1250:	12 64       	ori	r17, 0x42	; 66
    1252:	aa 94       	dec	r10
    1254:	aa 94       	dec	r10
    1256:	a9 f1       	breq	.+106    	; 0x12c2 <conv_int+0xe2>
    1258:	ce 01       	movw	r24, r28
    125a:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <fgetc>
    125e:	97 ff       	sbrs	r25, 7
    1260:	07 c0       	rjmp	.+14     	; 0x1270 <conv_int+0x90>
    1262:	2f c0       	rjmp	.+94     	; 0x12c2 <conv_int+0xe2>
    1264:	06 ff       	sbrs	r16, 6
    1266:	02 c0       	rjmp	.+4      	; 0x126c <conv_int+0x8c>
    1268:	12 60       	ori	r17, 0x02	; 2
    126a:	01 c0       	rjmp	.+2      	; 0x126e <conv_int+0x8e>
    126c:	12 61       	ori	r17, 0x12	; 18
    126e:	af 2c       	mov	r10, r15
    1270:	c1 2c       	mov	r12, r1
    1272:	d1 2c       	mov	r13, r1
    1274:	76 01       	movw	r14, r12
    1276:	20 ed       	ldi	r18, 0xD0	; 208
    1278:	28 0f       	add	r18, r24
    127a:	28 30       	cpi	r18, 0x08	; 8
    127c:	80 f0       	brcs	.+32     	; 0x129e <conv_int+0xbe>
    127e:	14 ff       	sbrs	r17, 4
    1280:	04 c0       	rjmp	.+8      	; 0x128a <conv_int+0xaa>
    1282:	be 01       	movw	r22, r28
    1284:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <ungetc>
    1288:	19 c0       	rjmp	.+50     	; 0x12bc <conv_int+0xdc>
    128a:	2a 30       	cpi	r18, 0x0A	; 10
    128c:	40 f0       	brcs	.+16     	; 0x129e <conv_int+0xbe>
    128e:	16 ff       	sbrs	r17, 6
    1290:	f8 cf       	rjmp	.-16     	; 0x1282 <conv_int+0xa2>
    1292:	2f 7d       	andi	r18, 0xDF	; 223
    1294:	3f ee       	ldi	r19, 0xEF	; 239
    1296:	32 0f       	add	r19, r18
    1298:	36 30       	cpi	r19, 0x06	; 6
    129a:	98 f7       	brcc	.-26     	; 0x1282 <conv_int+0xa2>
    129c:	27 50       	subi	r18, 0x07	; 7
    129e:	41 2f       	mov	r20, r17
    12a0:	c7 01       	movw	r24, r14
    12a2:	b6 01       	movw	r22, r12
    12a4:	0e 94 b7 08 	call	0x116e	; 0x116e <mulacc>
    12a8:	6b 01       	movw	r12, r22
    12aa:	7c 01       	movw	r14, r24
    12ac:	12 60       	ori	r17, 0x02	; 2
    12ae:	aa 94       	dec	r10
    12b0:	59 f0       	breq	.+22     	; 0x12c8 <conv_int+0xe8>
    12b2:	ce 01       	movw	r24, r28
    12b4:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <fgetc>
    12b8:	97 ff       	sbrs	r25, 7
    12ba:	dd cf       	rjmp	.-70     	; 0x1276 <conv_int+0x96>
    12bc:	11 fd       	sbrc	r17, 1
    12be:	04 c0       	rjmp	.+8      	; 0x12c8 <conv_int+0xe8>
    12c0:	ab cf       	rjmp	.-170    	; 0x1218 <conv_int+0x38>
    12c2:	c1 2c       	mov	r12, r1
    12c4:	d1 2c       	mov	r13, r1
    12c6:	76 01       	movw	r14, r12
    12c8:	17 ff       	sbrs	r17, 7
    12ca:	08 c0       	rjmp	.+16     	; 0x12dc <conv_int+0xfc>
    12cc:	f0 94       	com	r15
    12ce:	e0 94       	com	r14
    12d0:	d0 94       	com	r13
    12d2:	c0 94       	com	r12
    12d4:	c1 1c       	adc	r12, r1
    12d6:	d1 1c       	adc	r13, r1
    12d8:	e1 1c       	adc	r14, r1
    12da:	f1 1c       	adc	r15, r1
    12dc:	21 2f       	mov	r18, r17
    12de:	b7 01       	movw	r22, r14
    12e0:	a6 01       	movw	r20, r12
    12e2:	c4 01       	movw	r24, r8
    12e4:	0e 94 ab 08 	call	0x1156	; 0x1156 <putval>
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	df 91       	pop	r29
    12ec:	cf 91       	pop	r28
    12ee:	1f 91       	pop	r17
    12f0:	0f 91       	pop	r16
    12f2:	ff 90       	pop	r15
    12f4:	ef 90       	pop	r14
    12f6:	df 90       	pop	r13
    12f8:	cf 90       	pop	r12
    12fa:	af 90       	pop	r10
    12fc:	9f 90       	pop	r9
    12fe:	8f 90       	pop	r8
    1300:	08 95       	ret

00001302 <conv_brk>:
    1302:	a1 e2       	ldi	r26, 0x21	; 33
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e7 e8       	ldi	r30, 0x87	; 135
    1308:	f9 e0       	ldi	r31, 0x09	; 9
    130a:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <__prologue_saves__+0xa>
    130e:	5c 01       	movw	r10, r24
    1310:	7a 01       	movw	r14, r20
    1312:	8e 01       	movw	r16, r28
    1314:	0f 5f       	subi	r16, 0xFF	; 255
    1316:	1f 4f       	sbci	r17, 0xFF	; 255
    1318:	68 01       	movw	r12, r16
    131a:	80 e2       	ldi	r24, 0x20	; 32
    131c:	d8 01       	movw	r26, r16
    131e:	1d 92       	st	X+, r1
    1320:	8a 95       	dec	r24
    1322:	e9 f7       	brne	.-6      	; 0x131e <conv_brk+0x1c>
    1324:	f5 01       	movw	r30, r10
    1326:	73 80       	ldd	r7, Z+3	; 0x03
    1328:	40 e0       	ldi	r20, 0x00	; 0
    132a:	50 e0       	ldi	r21, 0x00	; 0
    132c:	81 2c       	mov	r8, r1
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	91 2c       	mov	r9, r1
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	f9 01       	movw	r30, r18
    1338:	73 fc       	sbrc	r7, 3
    133a:	a5 91       	lpm	r26, Z+
    133c:	73 fe       	sbrs	r7, 3
    133e:	a1 91       	ld	r26, Z+
    1340:	8f 01       	movw	r16, r30
    1342:	7a 2f       	mov	r23, r26
    1344:	9f 01       	movw	r18, r30
    1346:	a1 11       	cpse	r26, r1
    1348:	03 c0       	rjmp	.+6      	; 0x1350 <conv_brk+0x4e>
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	7d c0       	rjmp	.+250    	; 0x144a <conv_brk+0x148>
    1350:	ae 35       	cpi	r26, 0x5E	; 94
    1352:	19 f4       	brne	.+6      	; 0x135a <conv_brk+0x58>
    1354:	41 15       	cp	r20, r1
    1356:	51 05       	cpc	r21, r1
    1358:	59 f1       	breq	.+86     	; 0x13b0 <conv_brk+0xae>
    135a:	e9 2d       	mov	r30, r9
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	e4 17       	cp	r30, r20
    1360:	f5 07       	cpc	r31, r21
    1362:	3c f4       	brge	.+14     	; 0x1372 <conv_brk+0x70>
    1364:	ad 35       	cpi	r26, 0x5D	; 93
    1366:	69 f1       	breq	.+90     	; 0x13c2 <conv_brk+0xc0>
    1368:	ad 32       	cpi	r26, 0x2D	; 45
    136a:	19 f4       	brne	.+6      	; 0x1372 <conv_brk+0x70>
    136c:	bb 23       	and	r27, r27
    136e:	19 f1       	breq	.+70     	; 0x13b6 <conv_brk+0xb4>
    1370:	03 c0       	rjmp	.+6      	; 0x1378 <conv_brk+0x76>
    1372:	b1 11       	cpse	r27, r1
    1374:	01 c0       	rjmp	.+2      	; 0x1378 <conv_brk+0x76>
    1376:	8a 2e       	mov	r8, r26
    1378:	e7 2f       	mov	r30, r23
    137a:	e6 95       	lsr	r30
    137c:	e6 95       	lsr	r30
    137e:	e6 95       	lsr	r30
    1380:	86 01       	movw	r16, r12
    1382:	0e 0f       	add	r16, r30
    1384:	11 1d       	adc	r17, r1
    1386:	f8 01       	movw	r30, r16
    1388:	a7 2f       	mov	r26, r23
    138a:	a7 70       	andi	r26, 0x07	; 7
    138c:	8c 01       	movw	r16, r24
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <conv_brk+0x92>
    1390:	00 0f       	add	r16, r16
    1392:	11 1f       	adc	r17, r17
    1394:	aa 95       	dec	r26
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <conv_brk+0x8e>
    1398:	d8 01       	movw	r26, r16
    139a:	b0 81       	ld	r27, Z
    139c:	ba 2b       	or	r27, r26
    139e:	b0 83       	st	Z, r27
    13a0:	78 15       	cp	r23, r8
    13a2:	59 f0       	breq	.+22     	; 0x13ba <conv_brk+0xb8>
    13a4:	78 15       	cp	r23, r8
    13a6:	10 f4       	brcc	.+4      	; 0x13ac <conv_brk+0xaa>
    13a8:	7f 5f       	subi	r23, 0xFF	; 255
    13aa:	e6 cf       	rjmp	.-52     	; 0x1378 <conv_brk+0x76>
    13ac:	71 50       	subi	r23, 0x01	; 1
    13ae:	e4 cf       	rjmp	.-56     	; 0x1378 <conv_brk+0x76>
    13b0:	99 24       	eor	r9, r9
    13b2:	93 94       	inc	r9
    13b4:	03 c0       	rjmp	.+6      	; 0x13bc <conv_brk+0xba>
    13b6:	b1 e0       	ldi	r27, 0x01	; 1
    13b8:	01 c0       	rjmp	.+2      	; 0x13bc <conv_brk+0xba>
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	4f 5f       	subi	r20, 0xFF	; 255
    13be:	5f 4f       	sbci	r21, 0xFF	; 255
    13c0:	ba cf       	rjmp	.-140    	; 0x1336 <conv_brk+0x34>
    13c2:	bb 23       	and	r27, r27
    13c4:	19 f0       	breq	.+6      	; 0x13cc <conv_brk+0xca>
    13c6:	8e 81       	ldd	r24, Y+6	; 0x06
    13c8:	80 62       	ori	r24, 0x20	; 32
    13ca:	8e 83       	std	Y+6, r24	; 0x06
    13cc:	91 10       	cpse	r9, r1
    13ce:	03 c0       	rjmp	.+6      	; 0x13d6 <conv_brk+0xd4>
    13d0:	99 24       	eor	r9, r9
    13d2:	93 94       	inc	r9
    13d4:	15 c0       	rjmp	.+42     	; 0x1400 <conv_brk+0xfe>
    13d6:	f6 01       	movw	r30, r12
    13d8:	ce 01       	movw	r24, r28
    13da:	81 96       	adiw	r24, 0x21	; 33
    13dc:	20 81       	ld	r18, Z
    13de:	20 95       	com	r18
    13e0:	21 93       	st	Z+, r18
    13e2:	e8 17       	cp	r30, r24
    13e4:	f9 07       	cpc	r31, r25
    13e6:	d1 f7       	brne	.-12     	; 0x13dc <conv_brk+0xda>
    13e8:	f3 cf       	rjmp	.-26     	; 0x13d0 <conv_brk+0xce>
    13ea:	e1 14       	cp	r14, r1
    13ec:	f1 04       	cpc	r15, r1
    13ee:	29 f0       	breq	.+10     	; 0x13fa <conv_brk+0xf8>
    13f0:	d7 01       	movw	r26, r14
    13f2:	8c 93       	st	X, r24
    13f4:	f7 01       	movw	r30, r14
    13f6:	31 96       	adiw	r30, 0x01	; 1
    13f8:	7f 01       	movw	r14, r30
    13fa:	61 50       	subi	r22, 0x01	; 1
    13fc:	01 f1       	breq	.+64     	; 0x143e <conv_brk+0x13c>
    13fe:	91 2c       	mov	r9, r1
    1400:	c5 01       	movw	r24, r10
    1402:	69 a3       	std	Y+33, r22	; 0x21
    1404:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <fgetc>
    1408:	69 a1       	ldd	r22, Y+33	; 0x21
    140a:	97 fd       	sbrc	r25, 7
    140c:	16 c0       	rjmp	.+44     	; 0x143a <conv_brk+0x138>
    140e:	28 2f       	mov	r18, r24
    1410:	26 95       	lsr	r18
    1412:	26 95       	lsr	r18
    1414:	26 95       	lsr	r18
    1416:	f6 01       	movw	r30, r12
    1418:	e2 0f       	add	r30, r18
    141a:	f1 1d       	adc	r31, r1
    141c:	20 81       	ld	r18, Z
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	ac 01       	movw	r20, r24
    1422:	47 70       	andi	r20, 0x07	; 7
    1424:	55 27       	eor	r21, r21
    1426:	02 c0       	rjmp	.+4      	; 0x142c <conv_brk+0x12a>
    1428:	35 95       	asr	r19
    142a:	27 95       	ror	r18
    142c:	4a 95       	dec	r20
    142e:	e2 f7       	brpl	.-8      	; 0x1428 <conv_brk+0x126>
    1430:	20 fd       	sbrc	r18, 0
    1432:	db cf       	rjmp	.-74     	; 0x13ea <conv_brk+0xe8>
    1434:	b5 01       	movw	r22, r10
    1436:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <ungetc>
    143a:	91 10       	cpse	r9, r1
    143c:	86 cf       	rjmp	.-244    	; 0x134a <conv_brk+0x48>
    143e:	e1 14       	cp	r14, r1
    1440:	f1 04       	cpc	r15, r1
    1442:	11 f0       	breq	.+4      	; 0x1448 <conv_brk+0x146>
    1444:	d7 01       	movw	r26, r14
    1446:	1c 92       	st	X, r1
    1448:	c8 01       	movw	r24, r16
    144a:	a1 96       	adiw	r28, 0x21	; 33
    144c:	ed e0       	ldi	r30, 0x0D	; 13
    144e:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__epilogue_restores__+0xa>

00001452 <vfscanf>:
    1452:	4f 92       	push	r4
    1454:	5f 92       	push	r5
    1456:	7f 92       	push	r7
    1458:	8f 92       	push	r8
    145a:	9f 92       	push	r9
    145c:	af 92       	push	r10
    145e:	bf 92       	push	r11
    1460:	cf 92       	push	r12
    1462:	df 92       	push	r13
    1464:	ef 92       	push	r14
    1466:	ff 92       	push	r15
    1468:	0f 93       	push	r16
    146a:	1f 93       	push	r17
    146c:	cf 93       	push	r28
    146e:	df 93       	push	r29
    1470:	1f 92       	push	r1
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
    1476:	8c 01       	movw	r16, r24
    1478:	2b 01       	movw	r4, r22
    147a:	7a 01       	movw	r14, r20
    147c:	fc 01       	movw	r30, r24
    147e:	17 82       	std	Z+7, r1	; 0x07
    1480:	16 82       	std	Z+6, r1	; 0x06
    1482:	a1 2c       	mov	r10, r1
    1484:	f8 01       	movw	r30, r16
    1486:	d3 80       	ldd	r13, Z+3	; 0x03
    1488:	f2 01       	movw	r30, r4
    148a:	d3 fc       	sbrc	r13, 3
    148c:	85 91       	lpm	r24, Z+
    148e:	d3 fe       	sbrs	r13, 3
    1490:	81 91       	ld	r24, Z+
    1492:	38 2f       	mov	r19, r24
    1494:	2f 01       	movw	r4, r30
    1496:	88 23       	and	r24, r24
    1498:	09 f4       	brne	.+2      	; 0x149c <vfscanf+0x4a>
    149a:	fc c0       	rjmp	.+504    	; 0x1694 <vfscanf+0x242>
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	39 83       	std	Y+1, r19	; 0x01
    14a0:	0e 94 c3 0c 	call	0x1986	; 0x1986 <isspace>
    14a4:	39 81       	ldd	r19, Y+1	; 0x01
    14a6:	89 2b       	or	r24, r25
    14a8:	21 f0       	breq	.+8      	; 0x14b2 <vfscanf+0x60>
    14aa:	c8 01       	movw	r24, r16
    14ac:	0e 94 d7 08 	call	0x11ae	; 0x11ae <skip_spaces>
    14b0:	e9 cf       	rjmp	.-46     	; 0x1484 <vfscanf+0x32>
    14b2:	35 32       	cpi	r19, 0x25	; 37
    14b4:	41 f4       	brne	.+16     	; 0x14c6 <vfscanf+0x74>
    14b6:	f2 01       	movw	r30, r4
    14b8:	d3 fc       	sbrc	r13, 3
    14ba:	35 91       	lpm	r19, Z+
    14bc:	d3 fe       	sbrs	r13, 3
    14be:	31 91       	ld	r19, Z+
    14c0:	2f 01       	movw	r4, r30
    14c2:	35 32       	cpi	r19, 0x25	; 37
    14c4:	69 f4       	brne	.+26     	; 0x14e0 <vfscanf+0x8e>
    14c6:	c8 01       	movw	r24, r16
    14c8:	39 83       	std	Y+1, r19	; 0x01
    14ca:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <fgetc>
    14ce:	39 81       	ldd	r19, Y+1	; 0x01
    14d0:	97 fd       	sbrc	r25, 7
    14d2:	de c0       	rjmp	.+444    	; 0x1690 <vfscanf+0x23e>
    14d4:	38 17       	cp	r19, r24
    14d6:	b1 f2       	breq	.-84     	; 0x1484 <vfscanf+0x32>
    14d8:	b8 01       	movw	r22, r16
    14da:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <ungetc>
    14de:	da c0       	rjmp	.+436    	; 0x1694 <vfscanf+0x242>
    14e0:	3a 32       	cpi	r19, 0x2A	; 42
    14e2:	41 f4       	brne	.+16     	; 0x14f4 <vfscanf+0xa2>
    14e4:	d3 fc       	sbrc	r13, 3
    14e6:	35 91       	lpm	r19, Z+
    14e8:	d3 fe       	sbrs	r13, 3
    14ea:	31 91       	ld	r19, Z+
    14ec:	2f 01       	movw	r4, r30
    14ee:	bb 24       	eor	r11, r11
    14f0:	b3 94       	inc	r11
    14f2:	01 c0       	rjmp	.+2      	; 0x14f6 <vfscanf+0xa4>
    14f4:	b1 2c       	mov	r11, r1
    14f6:	71 2c       	mov	r7, r1
    14f8:	20 ed       	ldi	r18, 0xD0	; 208
    14fa:	23 0f       	add	r18, r19
    14fc:	2a 30       	cpi	r18, 0x0A	; 10
    14fe:	90 f4       	brcc	.+36     	; 0x1524 <vfscanf+0xd2>
    1500:	fb 2d       	mov	r31, r11
    1502:	f2 60       	ori	r31, 0x02	; 2
    1504:	bf 2e       	mov	r11, r31
    1506:	67 2d       	mov	r22, r7
    1508:	70 e0       	ldi	r23, 0x00	; 0
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	40 e2       	ldi	r20, 0x20	; 32
    1510:	0e 94 b7 08 	call	0x116e	; 0x116e <mulacc>
    1514:	76 2e       	mov	r7, r22
    1516:	f2 01       	movw	r30, r4
    1518:	d3 fc       	sbrc	r13, 3
    151a:	35 91       	lpm	r19, Z+
    151c:	d3 fe       	sbrs	r13, 3
    151e:	31 91       	ld	r19, Z+
    1520:	2f 01       	movw	r4, r30
    1522:	ea cf       	rjmp	.-44     	; 0x14f8 <vfscanf+0xa6>
    1524:	b1 fe       	sbrs	r11, 1
    1526:	03 c0       	rjmp	.+6      	; 0x152e <vfscanf+0xdc>
    1528:	71 10       	cpse	r7, r1
    152a:	03 c0       	rjmp	.+6      	; 0x1532 <vfscanf+0xe0>
    152c:	b3 c0       	rjmp	.+358    	; 0x1694 <vfscanf+0x242>
    152e:	77 24       	eor	r7, r7
    1530:	7a 94       	dec	r7
    1532:	38 36       	cpi	r19, 0x68	; 104
    1534:	19 f0       	breq	.+6      	; 0x153c <vfscanf+0xea>
    1536:	3c 36       	cpi	r19, 0x6C	; 108
    1538:	61 f0       	breq	.+24     	; 0x1552 <vfscanf+0x100>
    153a:	14 c0       	rjmp	.+40     	; 0x1564 <vfscanf+0x112>
    153c:	f2 01       	movw	r30, r4
    153e:	d3 fc       	sbrc	r13, 3
    1540:	35 91       	lpm	r19, Z+
    1542:	d3 fe       	sbrs	r13, 3
    1544:	31 91       	ld	r19, Z+
    1546:	2f 01       	movw	r4, r30
    1548:	38 36       	cpi	r19, 0x68	; 104
    154a:	61 f4       	brne	.+24     	; 0x1564 <vfscanf+0x112>
    154c:	fb 2d       	mov	r31, r11
    154e:	f8 60       	ori	r31, 0x08	; 8
    1550:	bf 2e       	mov	r11, r31
    1552:	8b 2d       	mov	r24, r11
    1554:	84 60       	ori	r24, 0x04	; 4
    1556:	b8 2e       	mov	r11, r24
    1558:	f2 01       	movw	r30, r4
    155a:	d3 fc       	sbrc	r13, 3
    155c:	35 91       	lpm	r19, Z+
    155e:	d3 fe       	sbrs	r13, 3
    1560:	31 91       	ld	r19, Z+
    1562:	2f 01       	movw	r4, r30
    1564:	33 23       	and	r19, r19
    1566:	09 f4       	brne	.+2      	; 0x156a <vfscanf+0x118>
    1568:	95 c0       	rjmp	.+298    	; 0x1694 <vfscanf+0x242>
    156a:	63 2f       	mov	r22, r19
    156c:	70 e0       	ldi	r23, 0x00	; 0
    156e:	88 e6       	ldi	r24, 0x68	; 104
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	39 83       	std	Y+1, r19	; 0x01
    1574:	0e 94 cb 0c 	call	0x1996	; 0x1996 <strchr_P>
    1578:	39 81       	ldd	r19, Y+1	; 0x01
    157a:	89 2b       	or	r24, r25
    157c:	09 f4       	brne	.+2      	; 0x1580 <vfscanf+0x12e>
    157e:	8a c0       	rjmp	.+276    	; 0x1694 <vfscanf+0x242>
    1580:	b0 fc       	sbrc	r11, 0
    1582:	07 c0       	rjmp	.+14     	; 0x1592 <vfscanf+0x140>
    1584:	f7 01       	movw	r30, r14
    1586:	c0 80       	ld	r12, Z
    1588:	d1 80       	ldd	r13, Z+1	; 0x01
    158a:	c7 01       	movw	r24, r14
    158c:	02 96       	adiw	r24, 0x02	; 2
    158e:	7c 01       	movw	r14, r24
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <vfscanf+0x144>
    1592:	c1 2c       	mov	r12, r1
    1594:	d1 2c       	mov	r13, r1
    1596:	3e 36       	cpi	r19, 0x6E	; 110
    1598:	51 f4       	brne	.+20     	; 0x15ae <vfscanf+0x15c>
    159a:	f8 01       	movw	r30, r16
    159c:	46 81       	ldd	r20, Z+6	; 0x06
    159e:	57 81       	ldd	r21, Z+7	; 0x07
    15a0:	60 e0       	ldi	r22, 0x00	; 0
    15a2:	70 e0       	ldi	r23, 0x00	; 0
    15a4:	2b 2d       	mov	r18, r11
    15a6:	c6 01       	movw	r24, r12
    15a8:	0e 94 ab 08 	call	0x1156	; 0x1156 <putval>
    15ac:	6b cf       	rjmp	.-298    	; 0x1484 <vfscanf+0x32>
    15ae:	33 36       	cpi	r19, 0x63	; 99
    15b0:	a1 f4       	brne	.+40     	; 0x15da <vfscanf+0x188>
    15b2:	b1 fc       	sbrc	r11, 1
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <vfscanf+0x168>
    15b6:	77 24       	eor	r7, r7
    15b8:	73 94       	inc	r7
    15ba:	c8 01       	movw	r24, r16
    15bc:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <fgetc>
    15c0:	97 fd       	sbrc	r25, 7
    15c2:	66 c0       	rjmp	.+204    	; 0x1690 <vfscanf+0x23e>
    15c4:	c1 14       	cp	r12, r1
    15c6:	d1 04       	cpc	r13, r1
    15c8:	29 f0       	breq	.+10     	; 0x15d4 <vfscanf+0x182>
    15ca:	f6 01       	movw	r30, r12
    15cc:	80 83       	st	Z, r24
    15ce:	c6 01       	movw	r24, r12
    15d0:	01 96       	adiw	r24, 0x01	; 1
    15d2:	6c 01       	movw	r12, r24
    15d4:	7a 94       	dec	r7
    15d6:	89 f7       	brne	.-30     	; 0x15ba <vfscanf+0x168>
    15d8:	57 c0       	rjmp	.+174    	; 0x1688 <vfscanf+0x236>
    15da:	3b 35       	cpi	r19, 0x5B	; 91
    15dc:	59 f4       	brne	.+22     	; 0x15f4 <vfscanf+0x1a2>
    15de:	92 01       	movw	r18, r4
    15e0:	a6 01       	movw	r20, r12
    15e2:	67 2d       	mov	r22, r7
    15e4:	c8 01       	movw	r24, r16
    15e6:	0e 94 81 09 	call	0x1302	; 0x1302 <conv_brk>
    15ea:	2c 01       	movw	r4, r24
    15ec:	00 97       	sbiw	r24, 0x00	; 0
    15ee:	09 f0       	breq	.+2      	; 0x15f2 <vfscanf+0x1a0>
    15f0:	4b c0       	rjmp	.+150    	; 0x1688 <vfscanf+0x236>
    15f2:	45 c0       	rjmp	.+138    	; 0x167e <vfscanf+0x22c>
    15f4:	c8 01       	movw	r24, r16
    15f6:	39 83       	std	Y+1, r19	; 0x01
    15f8:	0e 94 d7 08 	call	0x11ae	; 0x11ae <skip_spaces>
    15fc:	39 81       	ldd	r19, Y+1	; 0x01
    15fe:	97 fd       	sbrc	r25, 7
    1600:	47 c0       	rjmp	.+142    	; 0x1690 <vfscanf+0x23e>
    1602:	3f 36       	cpi	r19, 0x6F	; 111
    1604:	69 f1       	breq	.+90     	; 0x1660 <vfscanf+0x20e>
    1606:	28 f4       	brcc	.+10     	; 0x1612 <vfscanf+0x1c0>
    1608:	34 36       	cpi	r19, 0x64	; 100
    160a:	31 f1       	breq	.+76     	; 0x1658 <vfscanf+0x206>
    160c:	39 36       	cpi	r19, 0x69	; 105
    160e:	79 f1       	breq	.+94     	; 0x166e <vfscanf+0x21c>
    1610:	2b c0       	rjmp	.+86     	; 0x1668 <vfscanf+0x216>
    1612:	33 37       	cpi	r19, 0x73	; 115
    1614:	69 f0       	breq	.+26     	; 0x1630 <vfscanf+0x1de>
    1616:	35 37       	cpi	r19, 0x75	; 117
    1618:	f9 f0       	breq	.+62     	; 0x1658 <vfscanf+0x206>
    161a:	26 c0       	rjmp	.+76     	; 0x1668 <vfscanf+0x216>
    161c:	c1 14       	cp	r12, r1
    161e:	d1 04       	cpc	r13, r1
    1620:	29 f0       	breq	.+10     	; 0x162c <vfscanf+0x1da>
    1622:	f6 01       	movw	r30, r12
    1624:	80 82       	st	Z, r8
    1626:	c6 01       	movw	r24, r12
    1628:	01 96       	adiw	r24, 0x01	; 1
    162a:	6c 01       	movw	r12, r24
    162c:	7a 94       	dec	r7
    162e:	71 f0       	breq	.+28     	; 0x164c <vfscanf+0x1fa>
    1630:	c8 01       	movw	r24, r16
    1632:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <fgetc>
    1636:	4c 01       	movw	r8, r24
    1638:	97 fd       	sbrc	r25, 7
    163a:	08 c0       	rjmp	.+16     	; 0x164c <vfscanf+0x1fa>
    163c:	0e 94 c3 0c 	call	0x1986	; 0x1986 <isspace>
    1640:	89 2b       	or	r24, r25
    1642:	61 f3       	breq	.-40     	; 0x161c <vfscanf+0x1ca>
    1644:	b8 01       	movw	r22, r16
    1646:	c4 01       	movw	r24, r8
    1648:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <ungetc>
    164c:	c1 14       	cp	r12, r1
    164e:	d1 04       	cpc	r13, r1
    1650:	d9 f0       	breq	.+54     	; 0x1688 <vfscanf+0x236>
    1652:	f6 01       	movw	r30, r12
    1654:	10 82       	st	Z, r1
    1656:	18 c0       	rjmp	.+48     	; 0x1688 <vfscanf+0x236>
    1658:	fb 2d       	mov	r31, r11
    165a:	f0 62       	ori	r31, 0x20	; 32
    165c:	bf 2e       	mov	r11, r31
    165e:	07 c0       	rjmp	.+14     	; 0x166e <vfscanf+0x21c>
    1660:	8b 2d       	mov	r24, r11
    1662:	80 61       	ori	r24, 0x10	; 16
    1664:	b8 2e       	mov	r11, r24
    1666:	03 c0       	rjmp	.+6      	; 0x166e <vfscanf+0x21c>
    1668:	9b 2d       	mov	r25, r11
    166a:	90 64       	ori	r25, 0x40	; 64
    166c:	b9 2e       	mov	r11, r25
    166e:	2b 2d       	mov	r18, r11
    1670:	a6 01       	movw	r20, r12
    1672:	67 2d       	mov	r22, r7
    1674:	c8 01       	movw	r24, r16
    1676:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <conv_int>
    167a:	81 11       	cpse	r24, r1
    167c:	05 c0       	rjmp	.+10     	; 0x1688 <vfscanf+0x236>
    167e:	f8 01       	movw	r30, r16
    1680:	83 81       	ldd	r24, Z+3	; 0x03
    1682:	80 73       	andi	r24, 0x30	; 48
    1684:	29 f4       	brne	.+10     	; 0x1690 <vfscanf+0x23e>
    1686:	06 c0       	rjmp	.+12     	; 0x1694 <vfscanf+0x242>
    1688:	b0 fc       	sbrc	r11, 0
    168a:	fc ce       	rjmp	.-520    	; 0x1484 <vfscanf+0x32>
    168c:	a3 94       	inc	r10
    168e:	fa ce       	rjmp	.-524    	; 0x1484 <vfscanf+0x32>
    1690:	aa 20       	and	r10, r10
    1692:	19 f0       	breq	.+6      	; 0x169a <vfscanf+0x248>
    1694:	8a 2d       	mov	r24, r10
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	02 c0       	rjmp	.+4      	; 0x169e <vfscanf+0x24c>
    169a:	8f ef       	ldi	r24, 0xFF	; 255
    169c:	9f ef       	ldi	r25, 0xFF	; 255
    169e:	0f 90       	pop	r0
    16a0:	df 91       	pop	r29
    16a2:	cf 91       	pop	r28
    16a4:	1f 91       	pop	r17
    16a6:	0f 91       	pop	r16
    16a8:	ff 90       	pop	r15
    16aa:	ef 90       	pop	r14
    16ac:	df 90       	pop	r13
    16ae:	cf 90       	pop	r12
    16b0:	bf 90       	pop	r11
    16b2:	af 90       	pop	r10
    16b4:	9f 90       	pop	r9
    16b6:	8f 90       	pop	r8
    16b8:	7f 90       	pop	r7
    16ba:	5f 90       	pop	r5
    16bc:	4f 90       	pop	r4
    16be:	08 95       	ret

000016c0 <strtod>:
    16c0:	a0 e0       	ldi	r26, 0x00	; 0
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	e6 e6       	ldi	r30, 0x66	; 102
    16c6:	fb e0       	ldi	r31, 0x0B	; 11
    16c8:	0c 94 ff 0d 	jmp	0x1bfe	; 0x1bfe <__prologue_saves__+0xc>
    16cc:	8b 01       	movw	r16, r22
    16ce:	61 15       	cp	r22, r1
    16d0:	71 05       	cpc	r23, r1
    16d2:	21 f0       	breq	.+8      	; 0x16dc <strtod+0x1c>
    16d4:	db 01       	movw	r26, r22
    16d6:	8c 93       	st	X, r24
    16d8:	11 96       	adiw	r26, 0x01	; 1
    16da:	9c 93       	st	X, r25
    16dc:	ec 01       	movw	r28, r24
    16de:	5e 01       	movw	r10, r28
    16e0:	bf ef       	ldi	r27, 0xFF	; 255
    16e2:	ab 1a       	sub	r10, r27
    16e4:	bb 0a       	sbc	r11, r27
    16e6:	75 01       	movw	r14, r10
    16e8:	c8 80       	ld	r12, Y
    16ea:	8c 2d       	mov	r24, r12
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	0e 94 c3 0c 	call	0x1986	; 0x1986 <isspace>
    16f2:	89 2b       	or	r24, r25
    16f4:	11 f0       	breq	.+4      	; 0x16fa <strtod+0x3a>
    16f6:	e5 01       	movw	r28, r10
    16f8:	f2 cf       	rjmp	.-28     	; 0x16de <strtod+0x1e>
    16fa:	ed e2       	ldi	r30, 0x2D	; 45
    16fc:	ce 12       	cpse	r12, r30
    16fe:	08 c0       	rjmp	.+16     	; 0x1710 <strtod+0x50>
    1700:	7e 01       	movw	r14, r28
    1702:	f2 e0       	ldi	r31, 0x02	; 2
    1704:	ef 0e       	add	r14, r31
    1706:	f1 1c       	adc	r15, r1
    1708:	c9 80       	ldd	r12, Y+1	; 0x01
    170a:	dd 24       	eor	r13, r13
    170c:	d3 94       	inc	r13
    170e:	09 c0       	rjmp	.+18     	; 0x1722 <strtod+0x62>
    1710:	2b e2       	ldi	r18, 0x2B	; 43
    1712:	c2 12       	cpse	r12, r18
    1714:	05 c0       	rjmp	.+10     	; 0x1720 <strtod+0x60>
    1716:	7e 01       	movw	r14, r28
    1718:	42 e0       	ldi	r20, 0x02	; 2
    171a:	e4 0e       	add	r14, r20
    171c:	f1 1c       	adc	r15, r1
    171e:	c9 80       	ldd	r12, Y+1	; 0x01
    1720:	d1 2c       	mov	r13, r1
    1722:	e7 01       	movw	r28, r14
    1724:	21 97       	sbiw	r28, 0x01	; 1
    1726:	43 e0       	ldi	r20, 0x03	; 3
    1728:	50 e0       	ldi	r21, 0x00	; 0
    172a:	6c e7       	ldi	r22, 0x7C	; 124
    172c:	70 e0       	ldi	r23, 0x00	; 0
    172e:	ce 01       	movw	r24, r28
    1730:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <strncasecmp_P>
    1734:	89 2b       	or	r24, r25
    1736:	c1 f4       	brne	.+48     	; 0x1768 <strtod+0xa8>
    1738:	23 96       	adiw	r28, 0x03	; 3
    173a:	45 e0       	ldi	r20, 0x05	; 5
    173c:	50 e0       	ldi	r21, 0x00	; 0
    173e:	67 e7       	ldi	r22, 0x77	; 119
    1740:	70 e0       	ldi	r23, 0x00	; 0
    1742:	ce 01       	movw	r24, r28
    1744:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <strncasecmp_P>
    1748:	89 2b       	or	r24, r25
    174a:	09 f4       	brne	.+2      	; 0x174e <strtod+0x8e>
    174c:	25 96       	adiw	r28, 0x05	; 5
    174e:	01 15       	cp	r16, r1
    1750:	11 05       	cpc	r17, r1
    1752:	19 f0       	breq	.+6      	; 0x175a <strtod+0x9a>
    1754:	d8 01       	movw	r26, r16
    1756:	cd 93       	st	X+, r28
    1758:	dc 93       	st	X, r29
    175a:	d1 10       	cpse	r13, r1
    175c:	06 c1       	rjmp	.+524    	; 0x196a <strtod+0x2aa>
    175e:	60 e0       	ldi	r22, 0x00	; 0
    1760:	70 e0       	ldi	r23, 0x00	; 0
    1762:	80 e8       	ldi	r24, 0x80	; 128
    1764:	9f e7       	ldi	r25, 0x7F	; 127
    1766:	0a c1       	rjmp	.+532    	; 0x197c <strtod+0x2bc>
    1768:	43 e0       	ldi	r20, 0x03	; 3
    176a:	50 e0       	ldi	r21, 0x00	; 0
    176c:	64 e7       	ldi	r22, 0x74	; 116
    176e:	70 e0       	ldi	r23, 0x00	; 0
    1770:	ce 01       	movw	r24, r28
    1772:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <strncasecmp_P>
    1776:	89 2b       	or	r24, r25
    1778:	59 f4       	brne	.+22     	; 0x1790 <strtod+0xd0>
    177a:	01 15       	cp	r16, r1
    177c:	11 05       	cpc	r17, r1
    177e:	09 f4       	brne	.+2      	; 0x1782 <strtod+0xc2>
    1780:	f9 c0       	rjmp	.+498    	; 0x1974 <strtod+0x2b4>
    1782:	b2 e0       	ldi	r27, 0x02	; 2
    1784:	eb 0e       	add	r14, r27
    1786:	f1 1c       	adc	r15, r1
    1788:	f8 01       	movw	r30, r16
    178a:	f1 82       	std	Z+1, r15	; 0x01
    178c:	e0 82       	st	Z, r14
    178e:	f2 c0       	rjmp	.+484    	; 0x1974 <strtod+0x2b4>
    1790:	f7 01       	movw	r30, r14
    1792:	60 e0       	ldi	r22, 0x00	; 0
    1794:	70 e0       	ldi	r23, 0x00	; 0
    1796:	cb 01       	movw	r24, r22
    1798:	c0 e0       	ldi	r28, 0x00	; 0
    179a:	d0 e0       	ldi	r29, 0x00	; 0
    179c:	7f 01       	movw	r14, r30
    179e:	a0 ed       	ldi	r26, 0xD0	; 208
    17a0:	aa 2e       	mov	r10, r26
    17a2:	ac 0c       	add	r10, r12
    17a4:	29 e0       	ldi	r18, 0x09	; 9
    17a6:	2a 15       	cp	r18, r10
    17a8:	30 f1       	brcs	.+76     	; 0x17f6 <strtod+0x136>
    17aa:	4d 2d       	mov	r20, r13
    17ac:	42 60       	ori	r20, 0x02	; 2
    17ae:	b4 2e       	mov	r11, r20
    17b0:	2d 2d       	mov	r18, r13
    17b2:	28 70       	andi	r18, 0x08	; 8
    17b4:	d2 fe       	sbrs	r13, 2
    17b6:	04 c0       	rjmp	.+8      	; 0x17c0 <strtod+0x100>
    17b8:	21 11       	cpse	r18, r1
    17ba:	25 c0       	rjmp	.+74     	; 0x1806 <strtod+0x146>
    17bc:	21 96       	adiw	r28, 0x01	; 1
    17be:	23 c0       	rjmp	.+70     	; 0x1806 <strtod+0x146>
    17c0:	21 11       	cpse	r18, r1
    17c2:	21 97       	sbiw	r28, 0x01	; 1
    17c4:	a5 e0       	ldi	r26, 0x05	; 5
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	9b 01       	movw	r18, r22
    17ca:	ac 01       	movw	r20, r24
    17cc:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <__muluhisi3>
    17d0:	66 0f       	add	r22, r22
    17d2:	77 1f       	adc	r23, r23
    17d4:	88 1f       	adc	r24, r24
    17d6:	99 1f       	adc	r25, r25
    17d8:	6a 0d       	add	r22, r10
    17da:	71 1d       	adc	r23, r1
    17dc:	81 1d       	adc	r24, r1
    17de:	91 1d       	adc	r25, r1
    17e0:	68 39       	cpi	r22, 0x98	; 152
    17e2:	a9 e9       	ldi	r26, 0x99	; 153
    17e4:	7a 07       	cpc	r23, r26
    17e6:	8a 07       	cpc	r24, r26
    17e8:	a9 e1       	ldi	r26, 0x19	; 25
    17ea:	9a 07       	cpc	r25, r26
    17ec:	60 f0       	brcs	.+24     	; 0x1806 <strtod+0x146>
    17ee:	bd 2d       	mov	r27, r13
    17f0:	b6 60       	ori	r27, 0x06	; 6
    17f2:	bb 2e       	mov	r11, r27
    17f4:	08 c0       	rjmp	.+16     	; 0x1806 <strtod+0x146>
    17f6:	2e ef       	ldi	r18, 0xFE	; 254
    17f8:	a2 12       	cpse	r10, r18
    17fa:	0a c0       	rjmp	.+20     	; 0x1810 <strtod+0x150>
    17fc:	d3 fc       	sbrc	r13, 3
    17fe:	50 c0       	rjmp	.+160    	; 0x18a0 <strtod+0x1e0>
    1800:	4d 2d       	mov	r20, r13
    1802:	48 60       	ori	r20, 0x08	; 8
    1804:	b4 2e       	mov	r11, r20
    1806:	31 96       	adiw	r30, 0x01	; 1
    1808:	d7 01       	movw	r26, r14
    180a:	cc 90       	ld	r12, X
    180c:	db 2c       	mov	r13, r11
    180e:	c6 cf       	rjmp	.-116    	; 0x179c <strtod+0xdc>
    1810:	2c 2d       	mov	r18, r12
    1812:	2f 7d       	andi	r18, 0xDF	; 223
    1814:	25 34       	cpi	r18, 0x45	; 69
    1816:	09 f0       	breq	.+2      	; 0x181a <strtod+0x15a>
    1818:	43 c0       	rjmp	.+134    	; 0x18a0 <strtod+0x1e0>
    181a:	a0 81       	ld	r26, Z
    181c:	ad 32       	cpi	r26, 0x2D	; 45
    181e:	41 f4       	brne	.+16     	; 0x1830 <strtod+0x170>
    1820:	bd 2d       	mov	r27, r13
    1822:	b0 61       	ori	r27, 0x10	; 16
    1824:	db 2e       	mov	r13, r27
    1826:	7f 01       	movw	r14, r30
    1828:	22 e0       	ldi	r18, 0x02	; 2
    182a:	e2 0e       	add	r14, r18
    182c:	f1 1c       	adc	r15, r1
    182e:	0c c0       	rjmp	.+24     	; 0x1848 <strtod+0x188>
    1830:	7f 01       	movw	r14, r30
    1832:	ab 32       	cpi	r26, 0x2B	; 43
    1834:	31 f0       	breq	.+12     	; 0x1842 <strtod+0x182>
    1836:	4f ef       	ldi	r20, 0xFF	; 255
    1838:	e4 1a       	sub	r14, r20
    183a:	f4 0a       	sbc	r15, r20
    183c:	21 e0       	ldi	r18, 0x01	; 1
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	06 c0       	rjmp	.+12     	; 0x184e <strtod+0x18e>
    1842:	a2 e0       	ldi	r26, 0x02	; 2
    1844:	ea 0e       	add	r14, r26
    1846:	f1 1c       	adc	r15, r1
    1848:	a1 81       	ldd	r26, Z+1	; 0x01
    184a:	22 e0       	ldi	r18, 0x02	; 2
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	a0 53       	subi	r26, 0x30	; 48
    1850:	aa 30       	cpi	r26, 0x0A	; 10
    1852:	18 f0       	brcs	.+6      	; 0x185a <strtod+0x19a>
    1854:	e2 1a       	sub	r14, r18
    1856:	f3 0a       	sbc	r15, r19
    1858:	23 c0       	rjmp	.+70     	; 0x18a0 <strtod+0x1e0>
    185a:	f7 01       	movw	r30, r14
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	20 38       	cpi	r18, 0x80	; 128
    1862:	bc e0       	ldi	r27, 0x0C	; 12
    1864:	3b 07       	cpc	r19, r27
    1866:	5c f4       	brge	.+22     	; 0x187e <strtod+0x1be>
    1868:	a9 01       	movw	r20, r18
    186a:	44 0f       	add	r20, r20
    186c:	55 1f       	adc	r21, r21
    186e:	44 0f       	add	r20, r20
    1870:	55 1f       	adc	r21, r21
    1872:	24 0f       	add	r18, r20
    1874:	35 1f       	adc	r19, r21
    1876:	22 0f       	add	r18, r18
    1878:	33 1f       	adc	r19, r19
    187a:	2a 0f       	add	r18, r26
    187c:	31 1d       	adc	r19, r1
    187e:	af 01       	movw	r20, r30
    1880:	4f 5f       	subi	r20, 0xFF	; 255
    1882:	5f 4f       	sbci	r21, 0xFF	; 255
    1884:	7a 01       	movw	r14, r20
    1886:	a0 81       	ld	r26, Z
    1888:	a0 53       	subi	r26, 0x30	; 48
    188a:	aa 30       	cpi	r26, 0x0A	; 10
    188c:	10 f4       	brcc	.+4      	; 0x1892 <strtod+0x1d2>
    188e:	fa 01       	movw	r30, r20
    1890:	e7 cf       	rjmp	.-50     	; 0x1860 <strtod+0x1a0>
    1892:	d4 fe       	sbrs	r13, 4
    1894:	03 c0       	rjmp	.+6      	; 0x189c <strtod+0x1dc>
    1896:	31 95       	neg	r19
    1898:	21 95       	neg	r18
    189a:	31 09       	sbc	r19, r1
    189c:	c2 0f       	add	r28, r18
    189e:	d3 1f       	adc	r29, r19
    18a0:	d1 fe       	sbrs	r13, 1
    18a2:	09 c0       	rjmp	.+18     	; 0x18b6 <strtod+0x1f6>
    18a4:	01 15       	cp	r16, r1
    18a6:	11 05       	cpc	r17, r1
    18a8:	31 f0       	breq	.+12     	; 0x18b6 <strtod+0x1f6>
    18aa:	e1 e0       	ldi	r30, 0x01	; 1
    18ac:	ee 1a       	sub	r14, r30
    18ae:	f1 08       	sbc	r15, r1
    18b0:	d8 01       	movw	r26, r16
    18b2:	ed 92       	st	X+, r14
    18b4:	fc 92       	st	X, r15
    18b6:	0e 94 29 05 	call	0xa52	; 0xa52 <__floatunsisf>
    18ba:	2d 2d       	mov	r18, r13
    18bc:	23 70       	andi	r18, 0x03	; 3
    18be:	23 30       	cpi	r18, 0x03	; 3
    18c0:	19 f0       	breq	.+6      	; 0x18c8 <strtod+0x208>
    18c2:	4b 01       	movw	r8, r22
    18c4:	5c 01       	movw	r10, r24
    18c6:	06 c0       	rjmp	.+12     	; 0x18d4 <strtod+0x214>
    18c8:	4b 01       	movw	r8, r22
    18ca:	5c 01       	movw	r10, r24
    18cc:	b7 fa       	bst	r11, 7
    18ce:	b0 94       	com	r11
    18d0:	b7 f8       	bld	r11, 7
    18d2:	b0 94       	com	r11
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	a9 01       	movw	r20, r18
    18da:	c5 01       	movw	r24, r10
    18dc:	b4 01       	movw	r22, r8
    18de:	0e 94 bd 04 	call	0x97a	; 0x97a <__cmpsf2>
    18e2:	88 23       	and	r24, r24
    18e4:	09 f4       	brne	.+2      	; 0x18e8 <strtod+0x228>
    18e6:	3e c0       	rjmp	.+124    	; 0x1964 <strtod+0x2a4>
    18e8:	d7 ff       	sbrs	r29, 7
    18ea:	06 c0       	rjmp	.+12     	; 0x18f8 <strtod+0x238>
    18ec:	d1 95       	neg	r29
    18ee:	c1 95       	neg	r28
    18f0:	d1 09       	sbc	r29, r1
    18f2:	03 e9       	ldi	r16, 0x93	; 147
    18f4:	10 e0       	ldi	r17, 0x00	; 0
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <strtod+0x23c>
    18f8:	0b ea       	ldi	r16, 0xAB	; 171
    18fa:	10 e0       	ldi	r17, 0x00	; 0
    18fc:	68 01       	movw	r12, r16
    18fe:	b8 e1       	ldi	r27, 0x18	; 24
    1900:	cb 1a       	sub	r12, r27
    1902:	d1 08       	sbc	r13, r1
    1904:	90 e2       	ldi	r25, 0x20	; 32
    1906:	e9 2e       	mov	r14, r25
    1908:	f1 2c       	mov	r15, r1
    190a:	ce 15       	cp	r28, r14
    190c:	df 05       	cpc	r29, r15
    190e:	74 f0       	brlt	.+28     	; 0x192c <strtod+0x26c>
    1910:	f8 01       	movw	r30, r16
    1912:	25 91       	lpm	r18, Z+
    1914:	35 91       	lpm	r19, Z+
    1916:	45 91       	lpm	r20, Z+
    1918:	54 91       	lpm	r21, Z
    191a:	c5 01       	movw	r24, r10
    191c:	b4 01       	movw	r22, r8
    191e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__mulsf3>
    1922:	4b 01       	movw	r8, r22
    1924:	5c 01       	movw	r10, r24
    1926:	ce 19       	sub	r28, r14
    1928:	df 09       	sbc	r29, r15
    192a:	ef cf       	rjmp	.-34     	; 0x190a <strtod+0x24a>
    192c:	04 50       	subi	r16, 0x04	; 4
    192e:	11 09       	sbc	r17, r1
    1930:	f5 94       	asr	r15
    1932:	e7 94       	ror	r14
    1934:	0c 15       	cp	r16, r12
    1936:	1d 05       	cpc	r17, r13
    1938:	41 f7       	brne	.-48     	; 0x190a <strtod+0x24a>
    193a:	8a 2d       	mov	r24, r10
    193c:	88 0f       	add	r24, r24
    193e:	8b 2d       	mov	r24, r11
    1940:	88 1f       	adc	r24, r24
    1942:	8f 3f       	cpi	r24, 0xFF	; 255
    1944:	49 f0       	breq	.+18     	; 0x1958 <strtod+0x298>
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	a9 01       	movw	r20, r18
    194c:	c5 01       	movw	r24, r10
    194e:	b4 01       	movw	r22, r8
    1950:	0e 94 bd 04 	call	0x97a	; 0x97a <__cmpsf2>
    1954:	81 11       	cpse	r24, r1
    1956:	06 c0       	rjmp	.+12     	; 0x1964 <strtod+0x2a4>
    1958:	82 e2       	ldi	r24, 0x22	; 34
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	90 93 81 02 	sts	0x0281, r25
    1960:	80 93 80 02 	sts	0x0280, r24
    1964:	c5 01       	movw	r24, r10
    1966:	b4 01       	movw	r22, r8
    1968:	09 c0       	rjmp	.+18     	; 0x197c <strtod+0x2bc>
    196a:	60 e0       	ldi	r22, 0x00	; 0
    196c:	70 e0       	ldi	r23, 0x00	; 0
    196e:	80 e8       	ldi	r24, 0x80	; 128
    1970:	9f ef       	ldi	r25, 0xFF	; 255
    1972:	04 c0       	rjmp	.+8      	; 0x197c <strtod+0x2bc>
    1974:	60 e0       	ldi	r22, 0x00	; 0
    1976:	70 e0       	ldi	r23, 0x00	; 0
    1978:	80 ec       	ldi	r24, 0xC0	; 192
    197a:	9f e7       	ldi	r25, 0x7F	; 127
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    1980:	ec e0       	ldi	r30, 0x0C	; 12
    1982:	0c 94 1b 0e 	jmp	0x1c36	; 0x1c36 <__epilogue_restores__+0xc>

00001986 <isspace>:
    1986:	91 11       	cpse	r25, r1
    1988:	26 c1       	rjmp	.+588    	; 0x1bd6 <__ctype_isfalse>
    198a:	80 32       	cpi	r24, 0x20	; 32
    198c:	19 f0       	breq	.+6      	; 0x1994 <isspace+0xe>
    198e:	89 50       	subi	r24, 0x09	; 9
    1990:	85 50       	subi	r24, 0x05	; 5
    1992:	d0 f7       	brcc	.-12     	; 0x1988 <isspace+0x2>
    1994:	08 95       	ret

00001996 <strchr_P>:
    1996:	fc 01       	movw	r30, r24
    1998:	05 90       	lpm	r0, Z+
    199a:	06 16       	cp	r0, r22
    199c:	21 f0       	breq	.+8      	; 0x19a6 <strchr_P+0x10>
    199e:	00 20       	and	r0, r0
    19a0:	d9 f7       	brne	.-10     	; 0x1998 <strchr_P+0x2>
    19a2:	c0 01       	movw	r24, r0
    19a4:	08 95       	ret
    19a6:	31 97       	sbiw	r30, 0x01	; 1
    19a8:	cf 01       	movw	r24, r30
    19aa:	08 95       	ret

000019ac <strncasecmp_P>:
    19ac:	fb 01       	movw	r30, r22
    19ae:	dc 01       	movw	r26, r24
    19b0:	41 50       	subi	r20, 0x01	; 1
    19b2:	50 40       	sbci	r21, 0x00	; 0
    19b4:	88 f0       	brcs	.+34     	; 0x19d8 <strncasecmp_P+0x2c>
    19b6:	8d 91       	ld	r24, X+
    19b8:	81 34       	cpi	r24, 0x41	; 65
    19ba:	1c f0       	brlt	.+6      	; 0x19c2 <strncasecmp_P+0x16>
    19bc:	8b 35       	cpi	r24, 0x5B	; 91
    19be:	0c f4       	brge	.+2      	; 0x19c2 <strncasecmp_P+0x16>
    19c0:	80 5e       	subi	r24, 0xE0	; 224
    19c2:	65 91       	lpm	r22, Z+
    19c4:	61 34       	cpi	r22, 0x41	; 65
    19c6:	1c f0       	brlt	.+6      	; 0x19ce <strncasecmp_P+0x22>
    19c8:	6b 35       	cpi	r22, 0x5B	; 91
    19ca:	0c f4       	brge	.+2      	; 0x19ce <strncasecmp_P+0x22>
    19cc:	60 5e       	subi	r22, 0xE0	; 224
    19ce:	86 1b       	sub	r24, r22
    19d0:	61 11       	cpse	r22, r1
    19d2:	71 f3       	breq	.-36     	; 0x19b0 <strncasecmp_P+0x4>
    19d4:	99 0b       	sbc	r25, r25
    19d6:	08 95       	ret
    19d8:	88 1b       	sub	r24, r24
    19da:	fc cf       	rjmp	.-8      	; 0x19d4 <strncasecmp_P+0x28>

000019dc <strnlen_P>:
    19dc:	fc 01       	movw	r30, r24
    19de:	05 90       	lpm	r0, Z+
    19e0:	61 50       	subi	r22, 0x01	; 1
    19e2:	70 40       	sbci	r23, 0x00	; 0
    19e4:	01 10       	cpse	r0, r1
    19e6:	d8 f7       	brcc	.-10     	; 0x19de <strnlen_P+0x2>
    19e8:	80 95       	com	r24
    19ea:	90 95       	com	r25
    19ec:	8e 0f       	add	r24, r30
    19ee:	9f 1f       	adc	r25, r31
    19f0:	08 95       	ret

000019f2 <strnlen>:
    19f2:	fc 01       	movw	r30, r24
    19f4:	61 50       	subi	r22, 0x01	; 1
    19f6:	70 40       	sbci	r23, 0x00	; 0
    19f8:	01 90       	ld	r0, Z+
    19fa:	01 10       	cpse	r0, r1
    19fc:	d8 f7       	brcc	.-10     	; 0x19f4 <strnlen+0x2>
    19fe:	80 95       	com	r24
    1a00:	90 95       	com	r25
    1a02:	8e 0f       	add	r24, r30
    1a04:	9f 1f       	adc	r25, r31
    1a06:	08 95       	ret

00001a08 <fgetc>:
    1a08:	cf 93       	push	r28
    1a0a:	df 93       	push	r29
    1a0c:	ec 01       	movw	r28, r24
    1a0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a10:	20 ff       	sbrs	r18, 0
    1a12:	33 c0       	rjmp	.+102    	; 0x1a7a <fgetc+0x72>
    1a14:	26 ff       	sbrs	r18, 6
    1a16:	0a c0       	rjmp	.+20     	; 0x1a2c <fgetc+0x24>
    1a18:	2f 7b       	andi	r18, 0xBF	; 191
    1a1a:	2b 83       	std	Y+3, r18	; 0x03
    1a1c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a1e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a20:	01 96       	adiw	r24, 0x01	; 1
    1a22:	9f 83       	std	Y+7, r25	; 0x07
    1a24:	8e 83       	std	Y+6, r24	; 0x06
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	29 c0       	rjmp	.+82     	; 0x1a7e <fgetc+0x76>
    1a2c:	22 ff       	sbrs	r18, 2
    1a2e:	0f c0       	rjmp	.+30     	; 0x1a4e <fgetc+0x46>
    1a30:	e8 81       	ld	r30, Y
    1a32:	f9 81       	ldd	r31, Y+1	; 0x01
    1a34:	80 81       	ld	r24, Z
    1a36:	99 27       	eor	r25, r25
    1a38:	87 fd       	sbrc	r24, 7
    1a3a:	90 95       	com	r25
    1a3c:	00 97       	sbiw	r24, 0x00	; 0
    1a3e:	19 f4       	brne	.+6      	; 0x1a46 <fgetc+0x3e>
    1a40:	20 62       	ori	r18, 0x20	; 32
    1a42:	2b 83       	std	Y+3, r18	; 0x03
    1a44:	1a c0       	rjmp	.+52     	; 0x1a7a <fgetc+0x72>
    1a46:	31 96       	adiw	r30, 0x01	; 1
    1a48:	f9 83       	std	Y+1, r31	; 0x01
    1a4a:	e8 83       	st	Y, r30
    1a4c:	0e c0       	rjmp	.+28     	; 0x1a6a <fgetc+0x62>
    1a4e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1a50:	fb 85       	ldd	r31, Y+11	; 0x0b
    1a52:	09 95       	icall
    1a54:	97 ff       	sbrs	r25, 7
    1a56:	09 c0       	rjmp	.+18     	; 0x1a6a <fgetc+0x62>
    1a58:	2b 81       	ldd	r18, Y+3	; 0x03
    1a5a:	01 96       	adiw	r24, 0x01	; 1
    1a5c:	11 f4       	brne	.+4      	; 0x1a62 <fgetc+0x5a>
    1a5e:	80 e1       	ldi	r24, 0x10	; 16
    1a60:	01 c0       	rjmp	.+2      	; 0x1a64 <fgetc+0x5c>
    1a62:	80 e2       	ldi	r24, 0x20	; 32
    1a64:	82 2b       	or	r24, r18
    1a66:	8b 83       	std	Y+3, r24	; 0x03
    1a68:	08 c0       	rjmp	.+16     	; 0x1a7a <fgetc+0x72>
    1a6a:	2e 81       	ldd	r18, Y+6	; 0x06
    1a6c:	3f 81       	ldd	r19, Y+7	; 0x07
    1a6e:	2f 5f       	subi	r18, 0xFF	; 255
    1a70:	3f 4f       	sbci	r19, 0xFF	; 255
    1a72:	3f 83       	std	Y+7, r19	; 0x07
    1a74:	2e 83       	std	Y+6, r18	; 0x06
    1a76:	99 27       	eor	r25, r25
    1a78:	02 c0       	rjmp	.+4      	; 0x1a7e <fgetc+0x76>
    1a7a:	8f ef       	ldi	r24, 0xFF	; 255
    1a7c:	9f ef       	ldi	r25, 0xFF	; 255
    1a7e:	df 91       	pop	r29
    1a80:	cf 91       	pop	r28
    1a82:	08 95       	ret

00001a84 <fputc>:
    1a84:	0f 93       	push	r16
    1a86:	1f 93       	push	r17
    1a88:	cf 93       	push	r28
    1a8a:	df 93       	push	r29
    1a8c:	18 2f       	mov	r17, r24
    1a8e:	09 2f       	mov	r16, r25
    1a90:	eb 01       	movw	r28, r22
    1a92:	8b 81       	ldd	r24, Y+3	; 0x03
    1a94:	81 fd       	sbrc	r24, 1
    1a96:	03 c0       	rjmp	.+6      	; 0x1a9e <fputc+0x1a>
    1a98:	8f ef       	ldi	r24, 0xFF	; 255
    1a9a:	9f ef       	ldi	r25, 0xFF	; 255
    1a9c:	20 c0       	rjmp	.+64     	; 0x1ade <fputc+0x5a>
    1a9e:	82 ff       	sbrs	r24, 2
    1aa0:	10 c0       	rjmp	.+32     	; 0x1ac2 <fputc+0x3e>
    1aa2:	4e 81       	ldd	r20, Y+6	; 0x06
    1aa4:	5f 81       	ldd	r21, Y+7	; 0x07
    1aa6:	2c 81       	ldd	r18, Y+4	; 0x04
    1aa8:	3d 81       	ldd	r19, Y+5	; 0x05
    1aaa:	42 17       	cp	r20, r18
    1aac:	53 07       	cpc	r21, r19
    1aae:	7c f4       	brge	.+30     	; 0x1ace <fputc+0x4a>
    1ab0:	e8 81       	ld	r30, Y
    1ab2:	f9 81       	ldd	r31, Y+1	; 0x01
    1ab4:	9f 01       	movw	r18, r30
    1ab6:	2f 5f       	subi	r18, 0xFF	; 255
    1ab8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aba:	39 83       	std	Y+1, r19	; 0x01
    1abc:	28 83       	st	Y, r18
    1abe:	10 83       	st	Z, r17
    1ac0:	06 c0       	rjmp	.+12     	; 0x1ace <fputc+0x4a>
    1ac2:	e8 85       	ldd	r30, Y+8	; 0x08
    1ac4:	f9 85       	ldd	r31, Y+9	; 0x09
    1ac6:	81 2f       	mov	r24, r17
    1ac8:	09 95       	icall
    1aca:	89 2b       	or	r24, r25
    1acc:	29 f7       	brne	.-54     	; 0x1a98 <fputc+0x14>
    1ace:	2e 81       	ldd	r18, Y+6	; 0x06
    1ad0:	3f 81       	ldd	r19, Y+7	; 0x07
    1ad2:	2f 5f       	subi	r18, 0xFF	; 255
    1ad4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad6:	3f 83       	std	Y+7, r19	; 0x07
    1ad8:	2e 83       	std	Y+6, r18	; 0x06
    1ada:	81 2f       	mov	r24, r17
    1adc:	90 2f       	mov	r25, r16
    1ade:	df 91       	pop	r29
    1ae0:	cf 91       	pop	r28
    1ae2:	1f 91       	pop	r17
    1ae4:	0f 91       	pop	r16
    1ae6:	08 95       	ret

00001ae8 <ungetc>:
    1ae8:	fb 01       	movw	r30, r22
    1aea:	23 81       	ldd	r18, Z+3	; 0x03
    1aec:	20 ff       	sbrs	r18, 0
    1aee:	12 c0       	rjmp	.+36     	; 0x1b14 <ungetc+0x2c>
    1af0:	26 fd       	sbrc	r18, 6
    1af2:	10 c0       	rjmp	.+32     	; 0x1b14 <ungetc+0x2c>
    1af4:	8f 3f       	cpi	r24, 0xFF	; 255
    1af6:	3f ef       	ldi	r19, 0xFF	; 255
    1af8:	93 07       	cpc	r25, r19
    1afa:	61 f0       	breq	.+24     	; 0x1b14 <ungetc+0x2c>
    1afc:	82 83       	std	Z+2, r24	; 0x02
    1afe:	2f 7d       	andi	r18, 0xDF	; 223
    1b00:	20 64       	ori	r18, 0x40	; 64
    1b02:	23 83       	std	Z+3, r18	; 0x03
    1b04:	26 81       	ldd	r18, Z+6	; 0x06
    1b06:	37 81       	ldd	r19, Z+7	; 0x07
    1b08:	21 50       	subi	r18, 0x01	; 1
    1b0a:	31 09       	sbc	r19, r1
    1b0c:	37 83       	std	Z+7, r19	; 0x07
    1b0e:	26 83       	std	Z+6, r18	; 0x06
    1b10:	99 27       	eor	r25, r25
    1b12:	08 95       	ret
    1b14:	8f ef       	ldi	r24, 0xFF	; 255
    1b16:	9f ef       	ldi	r25, 0xFF	; 255
    1b18:	08 95       	ret

00001b1a <__ultoa_invert>:
    1b1a:	fa 01       	movw	r30, r20
    1b1c:	aa 27       	eor	r26, r26
    1b1e:	28 30       	cpi	r18, 0x08	; 8
    1b20:	51 f1       	breq	.+84     	; 0x1b76 <__ultoa_invert+0x5c>
    1b22:	20 31       	cpi	r18, 0x10	; 16
    1b24:	81 f1       	breq	.+96     	; 0x1b86 <__ultoa_invert+0x6c>
    1b26:	e8 94       	clt
    1b28:	6f 93       	push	r22
    1b2a:	6e 7f       	andi	r22, 0xFE	; 254
    1b2c:	6e 5f       	subi	r22, 0xFE	; 254
    1b2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b30:	8f 4f       	sbci	r24, 0xFF	; 255
    1b32:	9f 4f       	sbci	r25, 0xFF	; 255
    1b34:	af 4f       	sbci	r26, 0xFF	; 255
    1b36:	b1 e0       	ldi	r27, 0x01	; 1
    1b38:	3e d0       	rcall	.+124    	; 0x1bb6 <__ultoa_invert+0x9c>
    1b3a:	b4 e0       	ldi	r27, 0x04	; 4
    1b3c:	3c d0       	rcall	.+120    	; 0x1bb6 <__ultoa_invert+0x9c>
    1b3e:	67 0f       	add	r22, r23
    1b40:	78 1f       	adc	r23, r24
    1b42:	89 1f       	adc	r24, r25
    1b44:	9a 1f       	adc	r25, r26
    1b46:	a1 1d       	adc	r26, r1
    1b48:	68 0f       	add	r22, r24
    1b4a:	79 1f       	adc	r23, r25
    1b4c:	8a 1f       	adc	r24, r26
    1b4e:	91 1d       	adc	r25, r1
    1b50:	a1 1d       	adc	r26, r1
    1b52:	6a 0f       	add	r22, r26
    1b54:	71 1d       	adc	r23, r1
    1b56:	81 1d       	adc	r24, r1
    1b58:	91 1d       	adc	r25, r1
    1b5a:	a1 1d       	adc	r26, r1
    1b5c:	20 d0       	rcall	.+64     	; 0x1b9e <__ultoa_invert+0x84>
    1b5e:	09 f4       	brne	.+2      	; 0x1b62 <__ultoa_invert+0x48>
    1b60:	68 94       	set
    1b62:	3f 91       	pop	r19
    1b64:	2a e0       	ldi	r18, 0x0A	; 10
    1b66:	26 9f       	mul	r18, r22
    1b68:	11 24       	eor	r1, r1
    1b6a:	30 19       	sub	r19, r0
    1b6c:	30 5d       	subi	r19, 0xD0	; 208
    1b6e:	31 93       	st	Z+, r19
    1b70:	de f6       	brtc	.-74     	; 0x1b28 <__ultoa_invert+0xe>
    1b72:	cf 01       	movw	r24, r30
    1b74:	08 95       	ret
    1b76:	46 2f       	mov	r20, r22
    1b78:	47 70       	andi	r20, 0x07	; 7
    1b7a:	40 5d       	subi	r20, 0xD0	; 208
    1b7c:	41 93       	st	Z+, r20
    1b7e:	b3 e0       	ldi	r27, 0x03	; 3
    1b80:	0f d0       	rcall	.+30     	; 0x1ba0 <__ultoa_invert+0x86>
    1b82:	c9 f7       	brne	.-14     	; 0x1b76 <__ultoa_invert+0x5c>
    1b84:	f6 cf       	rjmp	.-20     	; 0x1b72 <__ultoa_invert+0x58>
    1b86:	46 2f       	mov	r20, r22
    1b88:	4f 70       	andi	r20, 0x0F	; 15
    1b8a:	40 5d       	subi	r20, 0xD0	; 208
    1b8c:	4a 33       	cpi	r20, 0x3A	; 58
    1b8e:	18 f0       	brcs	.+6      	; 0x1b96 <__ultoa_invert+0x7c>
    1b90:	49 5d       	subi	r20, 0xD9	; 217
    1b92:	31 fd       	sbrc	r19, 1
    1b94:	40 52       	subi	r20, 0x20	; 32
    1b96:	41 93       	st	Z+, r20
    1b98:	02 d0       	rcall	.+4      	; 0x1b9e <__ultoa_invert+0x84>
    1b9a:	a9 f7       	brne	.-22     	; 0x1b86 <__ultoa_invert+0x6c>
    1b9c:	ea cf       	rjmp	.-44     	; 0x1b72 <__ultoa_invert+0x58>
    1b9e:	b4 e0       	ldi	r27, 0x04	; 4
    1ba0:	a6 95       	lsr	r26
    1ba2:	97 95       	ror	r25
    1ba4:	87 95       	ror	r24
    1ba6:	77 95       	ror	r23
    1ba8:	67 95       	ror	r22
    1baa:	ba 95       	dec	r27
    1bac:	c9 f7       	brne	.-14     	; 0x1ba0 <__ultoa_invert+0x86>
    1bae:	00 97       	sbiw	r24, 0x00	; 0
    1bb0:	61 05       	cpc	r22, r1
    1bb2:	71 05       	cpc	r23, r1
    1bb4:	08 95       	ret
    1bb6:	9b 01       	movw	r18, r22
    1bb8:	ac 01       	movw	r20, r24
    1bba:	0a 2e       	mov	r0, r26
    1bbc:	06 94       	lsr	r0
    1bbe:	57 95       	ror	r21
    1bc0:	47 95       	ror	r20
    1bc2:	37 95       	ror	r19
    1bc4:	27 95       	ror	r18
    1bc6:	ba 95       	dec	r27
    1bc8:	c9 f7       	brne	.-14     	; 0x1bbc <__ultoa_invert+0xa2>
    1bca:	62 0f       	add	r22, r18
    1bcc:	73 1f       	adc	r23, r19
    1bce:	84 1f       	adc	r24, r20
    1bd0:	95 1f       	adc	r25, r21
    1bd2:	a0 1d       	adc	r26, r0
    1bd4:	08 95       	ret

00001bd6 <__ctype_isfalse>:
    1bd6:	99 27       	eor	r25, r25
    1bd8:	88 27       	eor	r24, r24

00001bda <__ctype_istrue>:
    1bda:	08 95       	ret

00001bdc <__muluhisi3>:
    1bdc:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__umulhisi3>
    1be0:	a5 9f       	mul	r26, r21
    1be2:	90 0d       	add	r25, r0
    1be4:	b4 9f       	mul	r27, r20
    1be6:	90 0d       	add	r25, r0
    1be8:	a4 9f       	mul	r26, r20
    1bea:	80 0d       	add	r24, r0
    1bec:	91 1d       	adc	r25, r1
    1bee:	11 24       	eor	r1, r1
    1bf0:	08 95       	ret

00001bf2 <__prologue_saves__>:
    1bf2:	2f 92       	push	r2
    1bf4:	3f 92       	push	r3
    1bf6:	4f 92       	push	r4
    1bf8:	5f 92       	push	r5
    1bfa:	6f 92       	push	r6
    1bfc:	7f 92       	push	r7
    1bfe:	8f 92       	push	r8
    1c00:	9f 92       	push	r9
    1c02:	af 92       	push	r10
    1c04:	bf 92       	push	r11
    1c06:	cf 92       	push	r12
    1c08:	df 92       	push	r13
    1c0a:	ef 92       	push	r14
    1c0c:	ff 92       	push	r15
    1c0e:	0f 93       	push	r16
    1c10:	1f 93       	push	r17
    1c12:	cf 93       	push	r28
    1c14:	df 93       	push	r29
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
    1c1a:	ca 1b       	sub	r28, r26
    1c1c:	db 0b       	sbc	r29, r27
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	f8 94       	cli
    1c22:	de bf       	out	0x3e, r29	; 62
    1c24:	0f be       	out	0x3f, r0	; 63
    1c26:	cd bf       	out	0x3d, r28	; 61
    1c28:	09 94       	ijmp

00001c2a <__epilogue_restores__>:
    1c2a:	2a 88       	ldd	r2, Y+18	; 0x12
    1c2c:	39 88       	ldd	r3, Y+17	; 0x11
    1c2e:	48 88       	ldd	r4, Y+16	; 0x10
    1c30:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c32:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c34:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c36:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c38:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c3a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c3c:	b9 84       	ldd	r11, Y+9	; 0x09
    1c3e:	c8 84       	ldd	r12, Y+8	; 0x08
    1c40:	df 80       	ldd	r13, Y+7	; 0x07
    1c42:	ee 80       	ldd	r14, Y+6	; 0x06
    1c44:	fd 80       	ldd	r15, Y+5	; 0x05
    1c46:	0c 81       	ldd	r16, Y+4	; 0x04
    1c48:	1b 81       	ldd	r17, Y+3	; 0x03
    1c4a:	aa 81       	ldd	r26, Y+2	; 0x02
    1c4c:	b9 81       	ldd	r27, Y+1	; 0x01
    1c4e:	ce 0f       	add	r28, r30
    1c50:	d1 1d       	adc	r29, r1
    1c52:	0f b6       	in	r0, 0x3f	; 63
    1c54:	f8 94       	cli
    1c56:	de bf       	out	0x3e, r29	; 62
    1c58:	0f be       	out	0x3f, r0	; 63
    1c5a:	cd bf       	out	0x3d, r28	; 61
    1c5c:	ed 01       	movw	r28, r26
    1c5e:	08 95       	ret

00001c60 <__umulhisi3>:
    1c60:	a2 9f       	mul	r26, r18
    1c62:	b0 01       	movw	r22, r0
    1c64:	b3 9f       	mul	r27, r19
    1c66:	c0 01       	movw	r24, r0
    1c68:	a3 9f       	mul	r26, r19
    1c6a:	70 0d       	add	r23, r0
    1c6c:	81 1d       	adc	r24, r1
    1c6e:	11 24       	eor	r1, r1
    1c70:	91 1d       	adc	r25, r1
    1c72:	b2 9f       	mul	r27, r18
    1c74:	70 0d       	add	r23, r0
    1c76:	81 1d       	adc	r24, r1
    1c78:	11 24       	eor	r1, r1
    1c7a:	91 1d       	adc	r25, r1
    1c7c:	08 95       	ret

00001c7e <_exit>:
    1c7e:	f8 94       	cli

00001c80 <__stop_program>:
    1c80:	ff cf       	rjmp	.-2      	; 0x1c80 <__stop_program>
